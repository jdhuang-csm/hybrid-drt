
// Code generated by stanc v2.29.2
#include <stan/model/model_header.hpp>
namespace gp_marginal_ZARC_lnR_aniso_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 219> locations_array__ = 
{" (found before start of program)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 90, column 4 to column 34)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 91, column 4 to column 29)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 92, column 4 to column 29)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 95, column 4 to column 31)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 96, column 4 to column 33)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 97, column 4 to column 38)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 98, column 4 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 99, column 4 to column 23)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 100, column 4 to column 33)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 101, column 4 to column 35)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 102, column 4 to column 28)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 103, column 4 to column 40)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 104, column 4 to column 34)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 105, column 4 to column 35)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 112, column 4 to column 27)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 113, column 4 to column 25)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 114, column 4 to column 29)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 115, column 4 to column 34)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 116, column 4 to column 46)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 119, column 4 to column 40)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 120, column 4 to column 32)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 121, column 4 to column 65)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 124, column 4 to column 29)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 125, column 4 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 131, column 8 to column 68)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 132, column 8 to column 39)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 133, column 8 to column 76)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 134, column 8 to column 96)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 135, column 8 to column 67)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 130, column 19 to line 136, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 130, column 4 to line 136, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 140, column 8 to column 38)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 142, column 12 to column 90)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 141, column 23 to line 143, column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 141, column 8 to line 143, column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 144, column 8 to column 40)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 139, column 19 to line 145, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 139, column 4 to line 145, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 148, column 4 to column 58)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 150, column 8 to column 100)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 149, column 19 to line 151, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 149, column 4 to line 151, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 200, column 4 to column 34)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 201, column 4 to column 28)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 204, column 8 to column 91)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 205, column 8 to column 72)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 206, column 8 to column 43)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 203, column 19 to line 207, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 203, column 4 to line 207, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 155, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 155, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 155, column 23 to column 24)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 155, column 4 to column 30)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 156, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 156, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 156, column 23 to column 24)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 156, column 4 to column 32)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 159, column 8 to column 56)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 162, column 12 to column 58)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 161, column 23 to line 163, column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 161, column 8 to line 163, column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 164, column 8 to column 46)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 158, column 19 to line 165, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 158, column 4 to line 165, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 169, column 8 to column 33)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 168, column 19 to line 170, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 168, column 4 to line 170, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 171, column 4 to column 25)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 172, column 4 to column 25)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 176, column 8 to column 58)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 177, column 8 to column 60)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 178, column 8 to column 65)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 175, column 19 to line 179, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 175, column 4 to line 179, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 183, column 8 to column 44)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 182, column 19 to line 184, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 182, column 4 to line 184, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 188, column 4 to column 32)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 189, column 4 to column 34)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 190, column 4 to column 39)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 191, column 4 to column 34)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 192, column 4 to column 28)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 193, column 4 to column 30)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 196, column 4 to column 38)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 197, column 4 to column 39)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 65, column 4 to column 19)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 66, column 4 to column 19)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 67, column 4 to column 19)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 68, column 4 to column 19)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 69, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 69, column 4 to column 27)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 70, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 70, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 70, column 4 to column 25)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 71, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 71, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 71, column 4 to column 25)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 72, column 4 to column 33)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 73, column 4 to column 36)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 74, column 4 to column 37)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 75, column 11 to column 12)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 75, column 4 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 78, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 78, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 78, column 4 to column 26)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 79, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 79, column 4 to column 26)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 82, column 8 to column 35)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 81, column 19 to line 83, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 81, column 4 to line 83, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 85, column 8 to column 32)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 84, column 19 to line 86, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 84, column 4 to line 86, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 90, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 90, column 13 to column 14)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 91, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 92, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 95, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 95, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 96, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 96, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 97, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 97, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 98, column 11 to column 12)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 99, column 11 to column 12)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 100, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 101, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 102, column 11 to column 12)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 103, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 112, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 112, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 113, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 113, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 114, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 114, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 115, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 115, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 116, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 116, column 38 to column 39)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 119, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 119, column 29 to column 30)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 120, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 121, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 124, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 124, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 125, column 11 to column 12)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 200, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 200, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 201, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 201, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 3, column 9 to column 10)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 3, column 2 to column 31)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 4, column 9 to column 10)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 4, column 2 to column 22)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 6, column 3 to column 80)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 7, column 3 to column 75)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 8, column 3 to column 100)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 9, column 3 to column 30)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 5, column 17 to line 10, column 3)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 5, column 2 to line 10, column 3)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 11, column 2 to column 19)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 2, column 71 to line 12, column 2)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 14, column 5 to column 23)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 15, column 12 to column 13)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 15, column 5 to column 34)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 16, column 9 to column 10)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 16, column 2 to column 22)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 18, column 3 to column 38)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 19, column 3 to column 78)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 20, column 3 to column 30)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 17, column 17 to line 21, column 3)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 17, column 2 to line 21, column 3)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 22, column 2 to column 19)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 13, column 54 to line 23, column 2)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 25, column 5 to column 31)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 24, column 57 to line 26, column 2)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 34, column 4 to column 22)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 35, column 4 to column 22)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 36, column 11 to column 13)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 36, column 4 to column 18)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 38, column 15 to column 17)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 38, column 19 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 38, column 8 to column 27)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 39, column 15 to column 17)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 39, column 8 to column 28)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 40, column 15 to column 17)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 40, column 19 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 40, column 8 to column 31)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 41, column 15 to column 17)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 41, column 19 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 41, column 8 to column 30)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 42, column 15 to column 17)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 42, column 8 to column 25)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 43, column 15 to column 17)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 43, column 19 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 43, column 8 to column 30)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 44, column 15 to column 17)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 44, column 19 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 44, column 8 to column 34)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 45, column 15 to column 17)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 45, column 19 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 45, column 8 to column 25)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 46, column 8 to column 44)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 48, column 12 to column 41)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 47, column 24 to line 49, column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 47, column 8 to line 49, column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 50, column 8 to column 36)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 51, column 8 to column 49)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 52, column 8 to column 58)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 53, column 8 to column 54)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 54, column 8 to column 38)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 55, column 8 to column 52)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 56, column 8 to column 68)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 57, column 8 to column 56)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 59, column 8 to column 58)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 37, column 4 to line 60, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 61, column 4 to column 14)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_ZARC_lnR_aniso.stan', line 33, column 33 to line 62, column 5)"};

struct HN_gamma_functor__ {
  template <typename T1__, typename T2__, typename T3__, typename T4__,
            stan::require_col_vector_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr,
            stan::require_stan_scalar_t<T3__>* = nullptr,
            stan::require_stan_scalar_t<T4__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T1__>, T2__, T3__, T4__>, -1, 1>
  operator()(const int& M, const T1__& tau, const T2__& tau_0,
             const T3__& alpha, const T4__& beta, std::ostream* pstream__) const;
};
struct raw_to_actual_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_col_vector_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__, T2__>, -1, 1>
  operator()(const T0__& x_raw, const T1__& mu, const T2__& scale,
             std::ostream* pstream__) const;
};
struct ZARC_gamma_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_col_vector_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__, T2__>, -1, 1>
  operator()(const T0__& tau, const T1__& tau_0, const T2__& beta,
             std::ostream* pstream__) const;
};
struct gp_pred_rng_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, typename T5__, typename T6__, typename RNG,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_col_vector_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr,
            stan::require_stan_scalar_t<T3__>* = nullptr,
            stan::require_stan_scalar_t<T4__>* = nullptr,
            stan::require_stan_scalar_t<T5__>* = nullptr,
            stan::require_stan_scalar_t<T6__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__, T3__, T4__,
                       stan::promote_args_t<T5__, T6__>>, -1, 1>
  operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& x2, const T1__& y1,
             const std::vector<Eigen::Matrix<T2__, -1, 1>>& x1,
             const T3__& alpha, const std::vector<T4__>& rho,
             const T5__& sq_sigma, const T6__& delta, RNG& base_rng__,
             std::ostream* pstream__) const;
};

template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_col_vector_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr,
          stan::require_stan_scalar_t<T3__>* = nullptr,
          stan::require_stan_scalar_t<T4__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T1__>, T2__, T3__, T4__>, -1, 1>
  HN_gamma(const int& M, const T1__& tau_arg__, const T2__& tau_0,
           const T3__& alpha, const T4__& beta, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T1__>, T2__, T3__, T4__>;
    int current_statement__ = 0; 
    const auto& tau = stan::math::to_ref(tau_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 151;
      stan::math::validate_non_negative_index("tt0", "M", M);
      Eigen::Matrix<local_scalar_t__, -1, 1> tt0 =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 152;
      stan::model::assign(tt0, stan::math::elt_divide(tau, tau_0),
        "assigning variable tt0");
      current_statement__ = 153;
      stan::math::validate_non_negative_index("gamma_out", "M", M);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_out =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 160;
      for (int m = 1; m <= M; ++m) {
        local_scalar_t__ theta = DUMMY_VAR__;
        current_statement__ = 155;
        theta = stan::math::atan2(stan::math::sin((stan::math::pi() * beta)),
                  (stan::math::pow(
                     stan::model::rvalue(tt0, "tt0",
                       stan::model::index_uni(m)), beta) +
                    stan::math::cos((stan::math::pi() * beta))));
        local_scalar_t__ nume = DUMMY_VAR__;
        current_statement__ = 156;
        nume = (((1 / stan::math::pi()) *
                  stan::math::pow(
                    stan::model::rvalue(tt0, "tt0",
                      stan::model::index_uni(m)), (beta * alpha))) *
                 stan::math::sin((alpha * theta)));
        local_scalar_t__ deno = DUMMY_VAR__;
        current_statement__ = 157;
        deno = stan::math::pow(
                 ((1 +
                    ((2 * stan::math::cos((stan::math::pi() * beta))) *
                      stan::math::pow(
                        stan::model::rvalue(tt0, "tt0",
                          stan::model::index_uni(m)), beta))) +
                   stan::math::pow(
                     stan::model::rvalue(tt0, "tt0",
                       stan::model::index_uni(m)), (2 * beta))), (alpha / 2));
        current_statement__ = 158;
        stan::model::assign(gamma_out, (nume / deno),
          "assigning variable gamma_out", stan::model::index_uni(m));
      }
      current_statement__ = 161;
      return gamma_out;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_col_vector_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__, T2__>, -1, 1>
  ZARC_gamma(const T0__& tau_arg__, const T1__& tau_0, const T2__& beta,
             std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T0__>, T1__, T2__>;
    int current_statement__ = 0; 
    const auto& tau = stan::math::to_ref(tau_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int M = std::numeric_limits<int>::min();
      current_statement__ = 163;
      M = stan::math::size(tau);
      current_statement__ = 164;
      stan::math::validate_non_negative_index("tt0", "M", M);
      Eigen::Matrix<local_scalar_t__, -1, 1> tt0 =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 165;
      stan::model::assign(tt0, stan::math::elt_divide(tau, tau_0),
        "assigning variable tt0");
      current_statement__ = 166;
      stan::math::validate_non_negative_index("gamma_out", "M", M);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_out =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 172;
      for (int m = 1; m <= M; ++m) {
        local_scalar_t__ nume = DUMMY_VAR__;
        current_statement__ = 168;
        nume = stan::math::sin(((1 - beta) * stan::math::pi()));
        local_scalar_t__ deno = DUMMY_VAR__;
        current_statement__ = 169;
        deno = ((2 * stan::math::pi()) *
                 (stan::math::cosh(
                    (beta *
                      stan::math::log(
                        stan::model::rvalue(tt0, "tt0",
                          stan::model::index_uni(m))))) -
                   stan::math::cos(((1 - beta) * stan::math::pi()))));
        current_statement__ = 170;
        stan::model::assign(gamma_out, (nume / deno),
          "assigning variable gamma_out", stan::model::index_uni(m));
      }
      current_statement__ = 173;
      return gamma_out;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_col_vector_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__, T2__>, -1, 1>
  raw_to_actual(const T0__& x_raw_arg__, const T1__& mu, const T2__& scale,
                std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T0__>, T1__, T2__>;
    int current_statement__ = 0; 
    const auto& x_raw = stan::math::to_ref(x_raw_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 175;
      return stan::math::add(mu, stan::math::multiply(x_raw, scale));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename RNG,
          stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_col_vector_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr,
          stan::require_stan_scalar_t<T3__>* = nullptr,
          stan::require_stan_scalar_t<T4__>* = nullptr,
          stan::require_stan_scalar_t<T5__>* = nullptr,
          stan::require_stan_scalar_t<T6__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__, T3__, T4__,
                     stan::promote_args_t<T5__, T6__>>, -1, 1>
  gp_pred_rng(const std::vector<Eigen::Matrix<T0__, -1, 1>>& x2,
              const T1__& y1_arg__,
              const std::vector<Eigen::Matrix<T2__, -1, 1>>& x1,
              const T3__& alpha, const std::vector<T4__>& rho,
              const T5__& sq_sigma, const T6__& delta, RNG& base_rng__,
              std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__, T3__,
                                 T4__, stan::promote_args_t<T5__, T6__>>;
    int current_statement__ = 0; 
    const auto& y1 = stan::math::to_ref(y1_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int N1 = std::numeric_limits<int>::min();
      current_statement__ = 177;
      N1 = stan::math::rows(y1);
      int N2 = std::numeric_limits<int>::min();
      current_statement__ = 178;
      N2 = stan::math::size(x2);
      current_statement__ = 179;
      stan::math::validate_non_negative_index("f2", "N2", N2);
      Eigen::Matrix<local_scalar_t__, -1, 1> f2 =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N2, DUMMY_VAR__);
      {
        current_statement__ = 181;
        stan::math::validate_non_negative_index("L_K", "N1", N1);
        current_statement__ = 182;
        stan::math::validate_non_negative_index("L_K", "N1", N1);
        Eigen::Matrix<local_scalar_t__, -1, -1> L_K =
           Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N1, N1,
             DUMMY_VAR__);
        current_statement__ = 184;
        stan::math::validate_non_negative_index("K_div_y1", "N1", N1);
        Eigen::Matrix<local_scalar_t__, -1, 1> K_div_y1 =
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N1, DUMMY_VAR__);
        current_statement__ = 186;
        stan::math::validate_non_negative_index("k_x1_x2", "N1", N1);
        current_statement__ = 187;
        stan::math::validate_non_negative_index("k_x1_x2", "N2", N2);
        Eigen::Matrix<local_scalar_t__, -1, -1> k_x1_x2 =
           Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N1, N2,
             DUMMY_VAR__);
        current_statement__ = 189;
        stan::math::validate_non_negative_index("v_pred", "N1", N1);
        current_statement__ = 190;
        stan::math::validate_non_negative_index("v_pred", "N2", N2);
        Eigen::Matrix<local_scalar_t__, -1, -1> v_pred =
           Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N1, N2,
             DUMMY_VAR__);
        current_statement__ = 192;
        stan::math::validate_non_negative_index("f2_mu", "N2", N2);
        Eigen::Matrix<local_scalar_t__, -1, 1> f2_mu =
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N2, DUMMY_VAR__);
        current_statement__ = 194;
        stan::math::validate_non_negative_index("cov_f2", "N2", N2);
        current_statement__ = 195;
        stan::math::validate_non_negative_index("cov_f2", "N2", N2);
        Eigen::Matrix<local_scalar_t__, -1, -1> cov_f2 =
           Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N2, N2,
             DUMMY_VAR__);
        current_statement__ = 197;
        stan::math::validate_non_negative_index("diag_delta", "N2", N2);
        current_statement__ = 198;
        stan::math::validate_non_negative_index("diag_delta", "N2", N2);
        Eigen::Matrix<local_scalar_t__, -1, -1> diag_delta =
           Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N2, N2,
             DUMMY_VAR__);
        current_statement__ = 200;
        stan::math::validate_non_negative_index("K", "N1", N1);
        current_statement__ = 201;
        stan::math::validate_non_negative_index("K", "N1", N1);
        Eigen::Matrix<local_scalar_t__, -1, -1> K =
           Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N1, N1,
             DUMMY_VAR__);
        current_statement__ = 203;
        stan::model::assign(K, stan::math::gp_exp_quad_cov(x1, alpha, rho),
          "assigning variable K");
        current_statement__ = 206;
        for (int n = 1; n <= N1; ++n) {
          current_statement__ = 204;
          stan::model::assign(K,
            (stan::model::rvalue(K, "K",
               stan::model::index_uni(n), stan::model::index_uni(n)) +
              sq_sigma),
            "assigning variable K", stan::model::index_uni(n),
                                      stan::model::index_uni(n));
        }
        current_statement__ = 207;
        stan::model::assign(L_K, stan::math::cholesky_decompose(K),
          "assigning variable L_K");
        current_statement__ = 208;
        stan::model::assign(K_div_y1,
          stan::math::mdivide_left_tri_low(L_K, y1),
          "assigning variable K_div_y1");
        current_statement__ = 209;
        stan::model::assign(K_div_y1,
          stan::math::transpose(
            stan::math::mdivide_right_tri_low(
              stan::math::transpose(stan::model::deep_copy(K_div_y1)), L_K)),
          "assigning variable K_div_y1");
        current_statement__ = 210;
        stan::model::assign(k_x1_x2,
          stan::math::gp_exp_quad_cov(x1, x2, alpha, rho),
          "assigning variable k_x1_x2");
        current_statement__ = 211;
        stan::model::assign(f2_mu,
          stan::math::multiply(stan::math::transpose(k_x1_x2), K_div_y1),
          "assigning variable f2_mu");
        current_statement__ = 212;
        stan::model::assign(v_pred,
          stan::math::mdivide_left_tri_low(L_K, k_x1_x2),
          "assigning variable v_pred");
        current_statement__ = 213;
        stan::model::assign(cov_f2,
          stan::math::subtract(stan::math::gp_exp_quad_cov(x2, alpha, rho),
            stan::math::multiply(stan::math::transpose(v_pred), v_pred)),
          "assigning variable cov_f2");
        current_statement__ = 214;
        stan::model::assign(diag_delta,
          stan::math::diag_matrix(stan::math::rep_vector(delta, N2)),
          "assigning variable diag_delta");
        current_statement__ = 215;
        stan::model::assign(f2,
          stan::math::multi_normal_rng(f2_mu,
            stan::math::add(cov_f2, diag_delta), base_rng__),
          "assigning variable f2");
      }
      current_statement__ = 217;
      return f2;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_col_vector_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*,
          stan::require_stan_scalar_t<T3__>*,
          stan::require_stan_scalar_t<T4__>*>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T1__>, T2__, T3__, T4__>, -1, 1>
HN_gamma_functor__::operator()(const int& M, const T1__& tau,
                               const T2__& tau_0, const T3__& alpha,
                               const T4__& beta, std::ostream* pstream__) 
const
{
  return HN_gamma(M, tau, tau_0, alpha, beta, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_col_vector_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__, T2__>, -1, 1>
raw_to_actual_functor__::operator()(const T0__& x_raw, const T1__& mu,
                                    const T2__& scale,
                                    std::ostream* pstream__)  const
{
  return raw_to_actual(x_raw, mu, scale, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_col_vector_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__, T2__>, -1, 1>
ZARC_gamma_functor__::operator()(const T0__& tau, const T1__& tau_0,
                                 const T2__& beta, std::ostream* pstream__) 
const
{
  return ZARC_gamma(tau, tau_0, beta, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename RNG,
          stan::require_stan_scalar_t<T0__>*,
          stan::require_col_vector_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*,
          stan::require_stan_scalar_t<T3__>*,
          stan::require_stan_scalar_t<T4__>*,
          stan::require_stan_scalar_t<T5__>*,
          stan::require_stan_scalar_t<T6__>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__, T3__, T4__,
                     stan::promote_args_t<T5__, T6__>>, -1, 1>
gp_pred_rng_functor__::operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& x2,
                                  const T1__& y1,
                                  const std::vector<Eigen::Matrix<T2__, -1, 1>>& x1,
                                  const T3__& alpha,
                                  const std::vector<T4__>& rho,
                                  const T5__& sq_sigma, const T6__& delta,
                                  RNG& base_rng__, std::ostream* pstream__) 
const
{
  return gp_pred_rng(x2, y1, x1, alpha, rho, sq_sigma, delta, base_rng__,
           pstream__);
}


class gp_marginal_ZARC_lnR_aniso_model final : public model_base_crtp<gp_marginal_ZARC_lnR_aniso_model> {

 private:
  int N;
  int D;
  int M;
  int K;
  Eigen::Matrix<double, -1, 1> tau__;
  std::vector<Eigen::Matrix<double, -1, 1>> x;
  std::vector<Eigen::Matrix<double, -1, 1>> y;
  double sigma_gp_scale;
  double sigma_rel_y_scale;
  double sigma_rel_Rp_scale;
  Eigen::Matrix<double, -1, 1> R_sign__;
  std::vector<Eigen::Matrix<double, -1, 1>> mu;
  Eigen::Matrix<double, -1, 1> Rp__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> tau{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> R_sign{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> Rp{nullptr, 0};
 
 public:
  ~gp_marginal_ZARC_lnR_aniso_model() { }
  
  inline std::string model_name() const final { return "gp_marginal_ZARC_lnR_aniso_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.2", "stancflags = "};
  }
  
  
  gp_marginal_ZARC_lnR_aniso_model(stan::io::var_context& context__,
                                   unsigned int random_seed__ = 0,
                                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "gp_marginal_ZARC_lnR_aniso_model_namespace::gp_marginal_ZARC_lnR_aniso_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 86;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 86;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 86;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 87;
      context__.validate_dims("data initialization","D","int",
           std::vector<size_t>{});
      D = std::numeric_limits<int>::min();
      
      
      current_statement__ = 87;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 87;
      stan::math::check_greater_or_equal(function__, "D", D, 1);
      current_statement__ = 88;
      context__.validate_dims("data initialization","M","int",
           std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      
      
      current_statement__ = 88;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 88;
      stan::math::check_greater_or_equal(function__, "M", M, 1);
      current_statement__ = 89;
      context__.validate_dims("data initialization","K","int",
           std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      
      
      current_statement__ = 89;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 89;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("tau", "M", M);
      current_statement__ = 91;
      context__.validate_dims("data initialization","tau","double",
           std::vector<size_t>{static_cast<size_t>(M)});
      tau__ = 
        Eigen::Matrix<double, -1, 1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      new (&tau) Eigen::Map<Eigen::Matrix<double, -1, 1>>(tau__.data(), M);
      
      {
        std::vector<local_scalar_t__> tau_flat__;
        current_statement__ = 91;
        tau_flat__ = context__.vals_r("tau");
        current_statement__ = 91;
        pos__ = 1;
        current_statement__ = 91;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 91;
          stan::model::assign(tau, tau_flat__[(pos__ - 1)],
            "assigning variable tau", stan::model::index_uni(sym1__));
          current_statement__ = 91;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 91;
      stan::math::check_greater_or_equal(function__, "tau", tau, 0);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("x", "N", N);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("x", "D", D);
      current_statement__ = 94;
      context__.validate_dims("data initialization","x","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(D)});
      x = 
        std::vector<Eigen::Matrix<double, -1, 1>>(N, 
          Eigen::Matrix<double, -1, 1>::Constant(D,
            std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 94;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 94;
        pos__ = 1;
        current_statement__ = 94;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 94;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 94;
            stan::model::assign(x, x_flat__[(pos__ - 1)],
              "assigning variable x", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
            current_statement__ = 94;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 95;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("y", "M", M);
      current_statement__ = 97;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(M)});
      y = 
        std::vector<Eigen::Matrix<double, -1, 1>>(N, 
          Eigen::Matrix<double, -1, 1>::Constant(M,
            std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 97;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 97;
        pos__ = 1;
        current_statement__ = 97;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 97;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 97;
            stan::model::assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
            current_statement__ = 97;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 98;
      context__.validate_dims("data initialization","sigma_gp_scale",
          "double", std::vector<size_t>{});
      sigma_gp_scale = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 98;
      sigma_gp_scale = context__.vals_r("sigma_gp_scale")[(1 - 1)];
      current_statement__ = 98;
      stan::math::check_greater_or_equal(function__, "sigma_gp_scale",
                                            sigma_gp_scale, 0);
      current_statement__ = 99;
      context__.validate_dims("data initialization","sigma_rel_y_scale",
          "double", std::vector<size_t>{});
      sigma_rel_y_scale = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 99;
      sigma_rel_y_scale = context__.vals_r("sigma_rel_y_scale")[(1 - 1)];
      current_statement__ = 99;
      stan::math::check_greater_or_equal(function__, "sigma_rel_y_scale",
                                            sigma_rel_y_scale, 0);
      current_statement__ = 100;
      context__.validate_dims("data initialization","sigma_rel_Rp_scale",
          "double", std::vector<size_t>{});
      sigma_rel_Rp_scale = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 100;
      sigma_rel_Rp_scale = context__.vals_r("sigma_rel_Rp_scale")[(1 - 1)];
      current_statement__ = 100;
      stan::math::check_greater_or_equal(function__, "sigma_rel_Rp_scale",
                                            sigma_rel_Rp_scale, 0);
      current_statement__ = 101;
      stan::math::validate_non_negative_index("R_sign", "K", K);
      current_statement__ = 102;
      context__.validate_dims("data initialization","R_sign","double",
           std::vector<size_t>{static_cast<size_t>(K)});
      R_sign__ = 
        Eigen::Matrix<double, -1, 1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      new (&R_sign) Eigen::Map<Eigen::Matrix<double, -1, 1>>(R_sign__.data(), K);
        
      
      {
        std::vector<local_scalar_t__> R_sign_flat__;
        current_statement__ = 102;
        R_sign_flat__ = context__.vals_r("R_sign");
        current_statement__ = 102;
        pos__ = 1;
        current_statement__ = 102;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 102;
          stan::model::assign(R_sign, R_sign_flat__[(pos__ - 1)],
            "assigning variable R_sign", stan::model::index_uni(sym1__));
          current_statement__ = 102;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 103;
      stan::math::validate_non_negative_index("mu", "K", K);
      current_statement__ = 104;
      stan::math::validate_non_negative_index("mu", "N", N);
      current_statement__ = 105;
      mu = 
        std::vector<Eigen::Matrix<double, -1, 1>>(K, 
          Eigen::Matrix<double, -1, 1>::Constant(N,
            std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 106;
      stan::math::validate_non_negative_index("Rp", "N", N);
      current_statement__ = 107;
      Rp__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&Rp) Eigen::Map<Eigen::Matrix<double, -1, 1>>(Rp__.data(), N);
      
      current_statement__ = 110;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 108;
        stan::model::assign(mu, stan::math::rep_vector(0.0, N),
          "assigning variable mu", stan::model::index_uni(k));
      }
      current_statement__ = 113;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 111;
        stan::model::assign(Rp,
          stan::math::sum(
            stan::math::fabs(
              stan::model::rvalue(y, "y", stan::model::index_uni(n)))),
          "assigning variable Rp", stan::model::index_uni(n));
      }
      current_statement__ = 107;
      stan::math::check_greater_or_equal(function__, "Rp", Rp, 0);
      current_statement__ = 114;
      stan::math::validate_non_negative_index("rho", "K", K);
      current_statement__ = 115;
      stan::math::validate_non_negative_index("rho", "D", D);
      current_statement__ = 116;
      stan::math::validate_non_negative_index("alpha", "K", K);
      current_statement__ = 117;
      stan::math::validate_non_negative_index("sigma", "K", K);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("lnR_raw", "K", K);
      current_statement__ = 119;
      stan::math::validate_non_negative_index("lnR_raw", "N", N);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("lntau_raw", "K", K);
      current_statement__ = 121;
      stan::math::validate_non_negative_index("lntau_raw", "N", N);
      current_statement__ = 122;
      stan::math::validate_non_negative_index("beta_trans_raw", "K", K);
      current_statement__ = 123;
      stan::math::validate_non_negative_index("beta_trans_raw", "N", N);
      current_statement__ = 124;
      stan::math::validate_non_negative_index("lnR_mu", "K", K);
      current_statement__ = 125;
      stan::math::validate_non_negative_index("lntau_mu", "K", K);
      current_statement__ = 126;
      stan::math::validate_non_negative_index("lnR_scale", "K", K);
      current_statement__ = 127;
      stan::math::validate_non_negative_index("lntau_scale", "K", K);
      current_statement__ = 128;
      stan::math::validate_non_negative_index("beta_trans_mu", "K", K);
      current_statement__ = 129;
      stan::math::validate_non_negative_index("beta_trans_scale", "K", K);
      current_statement__ = 130;
      stan::math::validate_non_negative_index("lnR", "K", K);
      current_statement__ = 131;
      stan::math::validate_non_negative_index("lnR", "N", N);
      current_statement__ = 132;
      stan::math::validate_non_negative_index("R", "K", K);
      current_statement__ = 133;
      stan::math::validate_non_negative_index("R", "N", N);
      current_statement__ = 134;
      stan::math::validate_non_negative_index("lntau", "K", K);
      current_statement__ = 135;
      stan::math::validate_non_negative_index("lntau", "N", N);
      current_statement__ = 136;
      stan::math::validate_non_negative_index("beta_trans", "K", K);
      current_statement__ = 137;
      stan::math::validate_non_negative_index("beta_trans", "N", N);
      current_statement__ = 138;
      stan::math::validate_non_negative_index("beta", "K", K);
      current_statement__ = 139;
      stan::math::validate_non_negative_index("beta", "N", N);
      current_statement__ = 140;
      stan::math::validate_non_negative_index("sigma_y", "N", N);
      current_statement__ = 141;
      stan::math::validate_non_negative_index("sigma_y", "M", M);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("sigma_Rp", "N", N);
      current_statement__ = 143;
      stan::math::validate_non_negative_index("sq_sigma", "K", K);
      current_statement__ = 144;
      stan::math::validate_non_negative_index("y_hat", "N", N);
      current_statement__ = 145;
      stan::math::validate_non_negative_index("y_hat", "M", M);
      current_statement__ = 146;
      stan::math::validate_non_negative_index("Rp_hat", "N", N);
      current_statement__ = 147;
      stan::math::validate_non_negative_index("lnR_raw_gp", "K", K);
      current_statement__ = 148;
      stan::math::validate_non_negative_index("lnR_raw_gp", "N", N);
      current_statement__ = 149;
      stan::math::validate_non_negative_index("R_gp", "K", K);
      current_statement__ = 150;
      stan::math::validate_non_negative_index("R_gp", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (K * D) + K + K + (K * N) + (K * N) + (K * N) + 
      K + K + K + K + K + K + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "gp_marginal_ZARC_lnR_aniso_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<std::vector<local_scalar_t__>> rho =
         std::vector<std::vector<local_scalar_t__>>(K, 
           std::vector<local_scalar_t__>(D, DUMMY_VAR__));
      current_statement__ = 1;
      rho = in__.template read_constrain_lb<
              std::vector<std::vector<local_scalar_t__>>, jacobian__>(0,
              lp__, K, D);
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 2;
      alpha = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__,
                K);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__,
                K);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> lnR_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      current_statement__ = 4;
      lnR_raw = in__.template read<
                  std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(K, N);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> lntau_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      current_statement__ = 5;
      lntau_raw = in__.template read<
                    std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(K,
                    N);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> beta_trans_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      current_statement__ = 6;
      beta_trans_raw = in__.template read<
                         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                         K, N);
      Eigen::Matrix<local_scalar_t__, -1, 1> lnR_mu =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 7;
      lnR_mu = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(K);
      Eigen::Matrix<local_scalar_t__, -1, 1> lntau_mu =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 8;
      lntau_mu = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   K);
      Eigen::Matrix<local_scalar_t__, -1, 1> lnR_scale =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 9;
      lnR_scale = in__.template read_constrain_lb<
                    Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                    lp__, K);
      Eigen::Matrix<local_scalar_t__, -1, 1> lntau_scale =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 10;
      lntau_scale = in__.template read_constrain_lb<
                      Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                      lp__, K);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_trans_mu =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 11;
      beta_trans_mu = in__.template read<
                        Eigen::Matrix<local_scalar_t__, -1, 1>>(K);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_trans_scale =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 12;
      beta_trans_scale = in__.template read_constrain_lb<
                           Eigen::Matrix<local_scalar_t__, -1, 1>, 
                           jacobian__>(0, lp__, K);
      local_scalar_t__ sigma_rel_y_raw = DUMMY_VAR__;
      current_statement__ = 13;
      sigma_rel_y_raw = in__.template read_constrain_lb<local_scalar_t__, 
                          jacobian__>(0, lp__);
      local_scalar_t__ sigma_rel_Rp_raw = DUMMY_VAR__;
      current_statement__ = 14;
      sigma_rel_Rp_raw = in__.template read_constrain_lb<local_scalar_t__, 
                           jacobian__>(0, lp__);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> lnR =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> R =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> lntau =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> beta_trans =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> beta =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> sigma_y =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_Rp =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> sq_sigma =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 22;
      stan::model::assign(sq_sigma,
        stan::math::square(stan::math::multiply(sigma_gp_scale, sigma)),
        "assigning variable sq_sigma");
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> y_hat =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__, -1, 1> Rp_hat =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 31;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 25;
        stan::model::assign(lnR,
          raw_to_actual(
            stan::model::rvalue(lnR_raw, "lnR_raw",
              stan::model::index_uni(k)),
            stan::model::rvalue(lnR_mu, "lnR_mu", stan::model::index_uni(k)),
            stan::model::rvalue(lnR_scale, "lnR_scale",
              stan::model::index_uni(k)), pstream__),
          "assigning variable lnR", stan::model::index_uni(k));
        current_statement__ = 26;
        stan::model::assign(R,
          stan::math::multiply(
            stan::math::exp(
              stan::model::rvalue(lnR, "lnR", stan::model::index_uni(k))),
            stan::model::rvalue(R_sign, "R_sign", stan::model::index_uni(k))),
          "assigning variable R", stan::model::index_uni(k));
        current_statement__ = 27;
        stan::model::assign(lntau,
          raw_to_actual(
            stan::model::rvalue(lntau_raw, "lntau_raw",
              stan::model::index_uni(k)),
            stan::model::rvalue(lntau_mu, "lntau_mu",
              stan::model::index_uni(k)),
            stan::model::rvalue(lntau_scale, "lntau_scale",
              stan::model::index_uni(k)), pstream__),
          "assigning variable lntau", stan::model::index_uni(k));
        current_statement__ = 28;
        stan::model::assign(beta_trans,
          raw_to_actual(
            stan::model::rvalue(beta_trans_raw, "beta_trans_raw",
              stan::model::index_uni(k)),
            stan::model::rvalue(beta_trans_mu, "beta_trans_mu",
              stan::model::index_uni(k)),
            stan::model::rvalue(beta_trans_scale, "beta_trans_scale",
              stan::model::index_uni(k)), pstream__),
          "assigning variable beta_trans", stan::model::index_uni(k));
        current_statement__ = 29;
        stan::model::assign(beta,
          stan::math::elt_divide(
            stan::math::exp(
              stan::model::rvalue(beta_trans, "beta_trans",
                stan::model::index_uni(k))),
            stan::math::add(
              stan::math::exp(
                stan::model::rvalue(beta_trans, "beta_trans",
                  stan::model::index_uni(k))), 1.0)),
          "assigning variable beta", stan::model::index_uni(k));
      }
      current_statement__ = 38;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 32;
        stan::model::assign(y_hat, stan::math::rep_vector(0.0, M),
          "assigning variable y_hat", stan::model::index_uni(n));
        current_statement__ = 35;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 33;
          stan::model::assign(y_hat,
            stan::math::add(
              stan::model::deep_copy(
                stan::model::rvalue(y_hat, "y_hat",
                  stan::model::index_uni(n))),
              stan::math::multiply(
                stan::model::rvalue(
                  stan::model::rvalue(R, "R", stan::model::index_uni(k)),
                  "R[k]", stan::model::index_uni(n)),
                ZARC_gamma(tau,
                  stan::math::exp(
                    stan::model::rvalue(
                      stan::model::rvalue(lntau, "lntau", stan::model::index_uni(k)),
                      "lntau[k]", stan::model::index_uni(n))),
                  stan::model::rvalue(
                    stan::model::rvalue(beta, "beta", stan::model::index_uni(k)),
                    "beta[k]", stan::model::index_uni(n)), pstream__))),
            "assigning variable y_hat", stan::model::index_uni(n));
        }
        current_statement__ = 36;
        stan::model::assign(Rp_hat,
          stan::math::sum(
            stan::math::fabs(
              stan::model::rvalue(y_hat, "y_hat", stan::model::index_uni(n)))),
          "assigning variable Rp_hat", stan::model::index_uni(n));
      }
      current_statement__ = 39;
      stan::model::assign(sigma_Rp,
        stan::math::multiply((sigma_rel_Rp_raw * sigma_rel_Rp_scale), Rp),
        "assigning variable sigma_Rp");
      current_statement__ = 42;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 40;
        stan::model::assign(sigma_y,
          stan::math::sqrt(
            stan::math::add(
              stan::math::square(
                stan::math::multiply((sigma_rel_y_raw * sigma_rel_y_scale),
                  stan::model::rvalue(y, "y", stan::model::index_uni(n)))),
              stan::math::square(
                stan::model::rvalue(sigma_Rp, "sigma_Rp",
                  stan::model::index_uni(n))))),
          "assigning variable sigma_y", stan::model::index_uni(n));
      }
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "beta", beta, 0);
      current_statement__ = 19;
      stan::math::check_less_or_equal(function__, "beta", beta, 1);
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "sigma_y", sigma_y, 0);
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "sigma_Rp", sigma_Rp, 0);
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "sq_sigma", sq_sigma, 0);
      {
        current_statement__ = 50;
        stan::math::validate_non_negative_index("L_K", "K", K);
        current_statement__ = 51;
        stan::math::validate_non_negative_index("L_K", "N", N);
        current_statement__ = 52;
        stan::math::validate_non_negative_index("L_K", "N", N);
        std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> L_K =
           std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(K, 
             Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, N,
               DUMMY_VAR__));
        current_statement__ = 54;
        stan::math::validate_non_negative_index("K_cov", "K", K);
        current_statement__ = 55;
        stan::math::validate_non_negative_index("K_cov", "N", N);
        current_statement__ = 56;
        stan::math::validate_non_negative_index("K_cov", "N", N);
        std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> K_cov =
           std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(K, 
             Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, N,
               DUMMY_VAR__));
        current_statement__ = 64;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 58;
          stan::model::assign(K_cov,
            stan::math::gp_exp_quad_cov(x,
              stan::model::rvalue(alpha, "alpha", stan::model::index_uni(k)),
              stan::model::rvalue(rho, "rho", stan::model::index_uni(k))),
            "assigning variable K_cov", stan::model::index_uni(k));
          current_statement__ = 61;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 59;
            stan::model::assign(K_cov,
              (stan::model::rvalue(
                 stan::model::rvalue(K_cov, "K_cov", stan::model::index_uni(k)),
                 "K_cov[k]",
                 stan::model::index_uni(n), stan::model::index_uni(n)) +
                stan::model::rvalue(sq_sigma, "sq_sigma",
                  stan::model::index_uni(k))),
              "assigning variable K_cov", stan::model::index_uni(k),
                                            stan::model::index_uni(n),
                                            stan::model::index_uni(n));
          }
          current_statement__ = 62;
          stan::model::assign(L_K,
            stan::math::cholesky_decompose(
              stan::model::rvalue(K_cov, "K_cov", stan::model::index_uni(k))),
            "assigning variable L_K", stan::model::index_uni(k));
        }
        current_statement__ = 67;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 65;
          lp_accum__.add(
            stan::math::inv_gamma_lpdf<propto__>(
              stan::model::rvalue(rho, "rho", stan::model::index_uni(k)), 5,
              5));
        }
        current_statement__ = 68;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(alpha));
        current_statement__ = 69;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(sigma));
        current_statement__ = 74;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 70;
          lp_accum__.add(
            stan::math::multi_normal_cholesky_lpdf<propto__>(
              stan::model::rvalue(lnR_raw, "lnR_raw",
                stan::model::index_uni(k)),
              stan::model::rvalue(mu, "mu", stan::model::index_uni(k)),
              stan::model::rvalue(L_K, "L_K", stan::model::index_uni(k))));
          current_statement__ = 71;
          lp_accum__.add(
            stan::math::multi_normal_cholesky_lpdf<propto__>(
              stan::model::rvalue(lntau_raw, "lntau_raw",
                stan::model::index_uni(k)),
              stan::model::rvalue(mu, "mu", stan::model::index_uni(k)),
              stan::model::rvalue(L_K, "L_K", stan::model::index_uni(k))));
          current_statement__ = 72;
          lp_accum__.add(
            stan::math::multi_normal_cholesky_lpdf<propto__>(
              stan::model::rvalue(beta_trans_raw, "beta_trans_raw",
                stan::model::index_uni(k)),
              stan::model::rvalue(mu, "mu", stan::model::index_uni(k)),
              stan::model::rvalue(L_K, "L_K", stan::model::index_uni(k))));
        }
        current_statement__ = 77;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 75;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(y, "y", stan::model::index_uni(n)),
              stan::model::rvalue(y_hat, "y_hat", stan::model::index_uni(n)),
              stan::model::rvalue(sigma_y, "sigma_y",
                stan::model::index_uni(n))));
        }
        current_statement__ = 78;
        lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(lnR_scale, 1, 1));
        current_statement__ = 79;
        lp_accum__.add(
          stan::math::inv_gamma_lpdf<propto__>(lntau_scale, 1, 1));
        current_statement__ = 80;
        lp_accum__.add(
          stan::math::inv_gamma_lpdf<propto__>(beta_trans_scale, 1, 1));
        current_statement__ = 81;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(beta_trans_mu, 0, 10));
        current_statement__ = 82;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(lnR_mu, 0, 100));
        current_statement__ = 83;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(lntau_mu, 0, 100));
        current_statement__ = 84;
        lp_accum__.add(
          stan::math::inv_gamma_lpdf<propto__>(sigma_rel_y_raw, 1, 1));
        current_statement__ = 85;
        lp_accum__.add(
          stan::math::inv_gamma_lpdf<propto__>(sigma_rel_Rp_raw, 1, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "gp_marginal_ZARC_lnR_aniso_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<std::vector<double>> rho =
         std::vector<std::vector<double>>(K, 
           std::vector<double>(D, std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 1;
      rho = in__.template read_constrain_lb<
              std::vector<std::vector<local_scalar_t__>>, jacobian__>(0,
              lp__, K, D);
      Eigen::Matrix<double, -1, 1> alpha =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      alpha = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__,
                K);
      Eigen::Matrix<double, -1, 1> sigma =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__,
                K);
      std::vector<Eigen::Matrix<double, -1, 1>> lnR_raw =
         std::vector<Eigen::Matrix<double, -1, 1>>(K, 
           Eigen::Matrix<double, -1, 1>::Constant(N,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 4;
      lnR_raw = in__.template read<
                  std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(K, N);
      std::vector<Eigen::Matrix<double, -1, 1>> lntau_raw =
         std::vector<Eigen::Matrix<double, -1, 1>>(K, 
           Eigen::Matrix<double, -1, 1>::Constant(N,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 5;
      lntau_raw = in__.template read<
                    std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(K,
                    N);
      std::vector<Eigen::Matrix<double, -1, 1>> beta_trans_raw =
         std::vector<Eigen::Matrix<double, -1, 1>>(K, 
           Eigen::Matrix<double, -1, 1>::Constant(N,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 6;
      beta_trans_raw = in__.template read<
                         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                         K, N);
      Eigen::Matrix<double, -1, 1> lnR_mu =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      lnR_mu = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(K);
      Eigen::Matrix<double, -1, 1> lntau_mu =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      lntau_mu = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   K);
      Eigen::Matrix<double, -1, 1> lnR_scale =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      lnR_scale = in__.template read_constrain_lb<
                    Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                    lp__, K);
      Eigen::Matrix<double, -1, 1> lntau_scale =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 10;
      lntau_scale = in__.template read_constrain_lb<
                      Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                      lp__, K);
      Eigen::Matrix<double, -1, 1> beta_trans_mu =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 11;
      beta_trans_mu = in__.template read<
                        Eigen::Matrix<local_scalar_t__, -1, 1>>(K);
      Eigen::Matrix<double, -1, 1> beta_trans_scale =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      beta_trans_scale = in__.template read_constrain_lb<
                           Eigen::Matrix<local_scalar_t__, -1, 1>, 
                           jacobian__>(0, lp__, K);
      double sigma_rel_y_raw = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 13;
      sigma_rel_y_raw = in__.template read_constrain_lb<local_scalar_t__, 
                          jacobian__>(0, lp__);
      double sigma_rel_Rp_raw = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 14;
      sigma_rel_Rp_raw = in__.template read_constrain_lb<local_scalar_t__, 
                           jacobian__>(0, lp__);
      std::vector<Eigen::Matrix<double, -1, 1>> lnR =
         std::vector<Eigen::Matrix<double, -1, 1>>(K, 
           Eigen::Matrix<double, -1, 1>::Constant(N,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> R =
         std::vector<Eigen::Matrix<double, -1, 1>>(K, 
           Eigen::Matrix<double, -1, 1>::Constant(N,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> lntau =
         std::vector<Eigen::Matrix<double, -1, 1>>(K, 
           Eigen::Matrix<double, -1, 1>::Constant(N,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> beta_trans =
         std::vector<Eigen::Matrix<double, -1, 1>>(K, 
           Eigen::Matrix<double, -1, 1>::Constant(N,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> beta =
         std::vector<Eigen::Matrix<double, -1, 1>>(K, 
           Eigen::Matrix<double, -1, 1>::Constant(N,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> sigma_y =
         std::vector<Eigen::Matrix<double, -1, 1>>(N, 
           Eigen::Matrix<double, -1, 1>::Constant(M,
             std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double, -1, 1> sigma_Rp =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> sq_sigma =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double, -1, 1>> y_hat =
         std::vector<Eigen::Matrix<double, -1, 1>>(N, 
           Eigen::Matrix<double, -1, 1>::Constant(M,
             std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double, -1, 1> Rp_hat =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          out__.write(rho[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(alpha);
      out__.write(sigma);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          out__.write(lnR_raw[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          out__.write(lntau_raw[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          out__.write(beta_trans_raw[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(lnR_mu);
      out__.write(lntau_mu);
      out__.write(lnR_scale);
      out__.write(lntau_scale);
      out__.write(beta_trans_mu);
      out__.write(beta_trans_scale);
      out__.write(sigma_rel_y_raw);
      out__.write(sigma_rel_Rp_raw);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 22;
      stan::model::assign(sq_sigma,
        stan::math::square(stan::math::multiply(sigma_gp_scale, sigma)),
        "assigning variable sq_sigma");
      current_statement__ = 31;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 25;
        stan::model::assign(lnR,
          raw_to_actual(
            stan::model::rvalue(lnR_raw, "lnR_raw",
              stan::model::index_uni(k)),
            stan::model::rvalue(lnR_mu, "lnR_mu", stan::model::index_uni(k)),
            stan::model::rvalue(lnR_scale, "lnR_scale",
              stan::model::index_uni(k)), pstream__),
          "assigning variable lnR", stan::model::index_uni(k));
        current_statement__ = 26;
        stan::model::assign(R,
          stan::math::multiply(
            stan::math::exp(
              stan::model::rvalue(lnR, "lnR", stan::model::index_uni(k))),
            stan::model::rvalue(R_sign, "R_sign", stan::model::index_uni(k))),
          "assigning variable R", stan::model::index_uni(k));
        current_statement__ = 27;
        stan::model::assign(lntau,
          raw_to_actual(
            stan::model::rvalue(lntau_raw, "lntau_raw",
              stan::model::index_uni(k)),
            stan::model::rvalue(lntau_mu, "lntau_mu",
              stan::model::index_uni(k)),
            stan::model::rvalue(lntau_scale, "lntau_scale",
              stan::model::index_uni(k)), pstream__),
          "assigning variable lntau", stan::model::index_uni(k));
        current_statement__ = 28;
        stan::model::assign(beta_trans,
          raw_to_actual(
            stan::model::rvalue(beta_trans_raw, "beta_trans_raw",
              stan::model::index_uni(k)),
            stan::model::rvalue(beta_trans_mu, "beta_trans_mu",
              stan::model::index_uni(k)),
            stan::model::rvalue(beta_trans_scale, "beta_trans_scale",
              stan::model::index_uni(k)), pstream__),
          "assigning variable beta_trans", stan::model::index_uni(k));
        current_statement__ = 29;
        stan::model::assign(beta,
          stan::math::elt_divide(
            stan::math::exp(
              stan::model::rvalue(beta_trans, "beta_trans",
                stan::model::index_uni(k))),
            stan::math::add(
              stan::math::exp(
                stan::model::rvalue(beta_trans, "beta_trans",
                  stan::model::index_uni(k))), 1.0)),
          "assigning variable beta", stan::model::index_uni(k));
      }
      current_statement__ = 38;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 32;
        stan::model::assign(y_hat, stan::math::rep_vector(0.0, M),
          "assigning variable y_hat", stan::model::index_uni(n));
        current_statement__ = 35;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 33;
          stan::model::assign(y_hat,
            stan::math::add(
              stan::model::deep_copy(
                stan::model::rvalue(y_hat, "y_hat",
                  stan::model::index_uni(n))),
              stan::math::multiply(
                stan::model::rvalue(
                  stan::model::rvalue(R, "R", stan::model::index_uni(k)),
                  "R[k]", stan::model::index_uni(n)),
                ZARC_gamma(tau,
                  stan::math::exp(
                    stan::model::rvalue(
                      stan::model::rvalue(lntau, "lntau", stan::model::index_uni(k)),
                      "lntau[k]", stan::model::index_uni(n))),
                  stan::model::rvalue(
                    stan::model::rvalue(beta, "beta", stan::model::index_uni(k)),
                    "beta[k]", stan::model::index_uni(n)), pstream__))),
            "assigning variable y_hat", stan::model::index_uni(n));
        }
        current_statement__ = 36;
        stan::model::assign(Rp_hat,
          stan::math::sum(
            stan::math::fabs(
              stan::model::rvalue(y_hat, "y_hat", stan::model::index_uni(n)))),
          "assigning variable Rp_hat", stan::model::index_uni(n));
      }
      current_statement__ = 39;
      stan::model::assign(sigma_Rp,
        stan::math::multiply((sigma_rel_Rp_raw * sigma_rel_Rp_scale), Rp),
        "assigning variable sigma_Rp");
      current_statement__ = 42;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 40;
        stan::model::assign(sigma_y,
          stan::math::sqrt(
            stan::math::add(
              stan::math::square(
                stan::math::multiply((sigma_rel_y_raw * sigma_rel_y_scale),
                  stan::model::rvalue(y, "y", stan::model::index_uni(n)))),
              stan::math::square(
                stan::model::rvalue(sigma_Rp, "sigma_Rp",
                  stan::model::index_uni(n))))),
          "assigning variable sigma_y", stan::model::index_uni(n));
      }
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "beta", beta, 0);
      current_statement__ = 19;
      stan::math::check_less_or_equal(function__, "beta", beta, 1);
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "sigma_y", sigma_y, 0);
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "sigma_Rp", sigma_Rp, 0);
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "sq_sigma", sq_sigma, 0);
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            out__.write(lnR[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            out__.write(R[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            out__.write(lntau[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            out__.write(beta_trans[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            out__.write(beta[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            out__.write(sigma_y[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(sigma_Rp);
        out__.write(sq_sigma);
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            out__.write(y_hat[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(Rp_hat);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<Eigen::Matrix<double, -1, 1>> lnR_raw_gp =
         std::vector<Eigen::Matrix<double, -1, 1>>(K, 
           Eigen::Matrix<double, -1, 1>::Constant(N,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> R_gp =
         std::vector<Eigen::Matrix<double, -1, 1>>(K, 
           Eigen::Matrix<double, -1, 1>::Constant(N,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 49;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 45;
        stan::model::assign(lnR_raw_gp,
          gp_pred_rng(x,
            stan::model::rvalue(lnR_raw, "lnR_raw",
              stan::model::index_uni(k)), x,
            stan::model::rvalue(alpha, "alpha", stan::model::index_uni(k)),
            stan::model::rvalue(rho, "rho", stan::model::index_uni(k)),
            stan::model::rvalue(sq_sigma, "sq_sigma",
              stan::model::index_uni(k)), 1e-9, base_rng__, pstream__),
          "assigning variable lnR_raw_gp", stan::model::index_uni(k));
        current_statement__ = 46;
        stan::model::assign(R_gp,
          raw_to_actual(
            stan::model::rvalue(lnR_raw_gp, "lnR_raw_gp",
              stan::model::index_uni(k)),
            stan::model::rvalue(lnR_mu, "lnR_mu", stan::model::index_uni(k)),
            stan::model::rvalue(lnR_scale, "lnR_scale",
              stan::model::index_uni(k)), pstream__),
          "assigning variable R_gp", stan::model::index_uni(k));
        current_statement__ = 47;
        stan::model::assign(R_gp,
          stan::math::multiply(
            stan::math::exp(
              stan::model::deep_copy(
                stan::model::rvalue(R_gp, "R_gp", stan::model::index_uni(k)))),
            stan::model::rvalue(R_sign, "R_sign", stan::model::index_uni(k))),
          "assigning variable R_gp", stan::model::index_uni(k));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          out__.write(lnR_raw_gp[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          out__.write(R_gp[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<std::vector<local_scalar_t__>> rho =
         std::vector<std::vector<local_scalar_t__>>(K, 
           std::vector<local_scalar_t__>(D, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          rho[(sym2__ - 1)][(sym1__ - 1)] = in__.read<local_scalar_t__>();
        }
      }
      out__.write_free_lb(0, rho);
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(alpha, in__.read<local_scalar_t__>(),
          "assigning variable alpha", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, alpha);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(sigma, in__.read<local_scalar_t__>(),
          "assigning variable sigma", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, sigma);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> lnR_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          stan::model::assign(lnR_raw, in__.read<local_scalar_t__>(),
            "assigning variable lnR_raw", stan::model::index_uni(sym2__),
                                            stan::model::index_uni(sym1__));
        }
      }
      out__.write(lnR_raw);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> lntau_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          stan::model::assign(lntau_raw, in__.read<local_scalar_t__>(),
            "assigning variable lntau_raw", stan::model::index_uni(sym2__),
                                              stan::model::index_uni(sym1__));
        }
      }
      out__.write(lntau_raw);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> beta_trans_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          stan::model::assign(beta_trans_raw, in__.read<local_scalar_t__>(),
            "assigning variable beta_trans_raw", stan::model::index_uni(sym2__),
                                                   stan::model::index_uni(sym1__));
        }
      }
      out__.write(beta_trans_raw);
      Eigen::Matrix<local_scalar_t__, -1, 1> lnR_mu =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(lnR_mu, in__.read<local_scalar_t__>(),
          "assigning variable lnR_mu", stan::model::index_uni(sym1__));
      }
      out__.write(lnR_mu);
      Eigen::Matrix<local_scalar_t__, -1, 1> lntau_mu =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(lntau_mu, in__.read<local_scalar_t__>(),
          "assigning variable lntau_mu", stan::model::index_uni(sym1__));
      }
      out__.write(lntau_mu);
      Eigen::Matrix<local_scalar_t__, -1, 1> lnR_scale =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(lnR_scale, in__.read<local_scalar_t__>(),
          "assigning variable lnR_scale", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, lnR_scale);
      Eigen::Matrix<local_scalar_t__, -1, 1> lntau_scale =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(lntau_scale, in__.read<local_scalar_t__>(),
          "assigning variable lntau_scale", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, lntau_scale);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_trans_mu =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(beta_trans_mu, in__.read<local_scalar_t__>(),
          "assigning variable beta_trans_mu", stan::model::index_uni(sym1__));
      }
      out__.write(beta_trans_mu);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_trans_scale =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(beta_trans_scale, in__.read<local_scalar_t__>(),
          "assigning variable beta_trans_scale", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, beta_trans_scale);
      local_scalar_t__ sigma_rel_y_raw = DUMMY_VAR__;
      sigma_rel_y_raw = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_rel_y_raw);
      local_scalar_t__ sigma_rel_Rp_raw = DUMMY_VAR__;
      sigma_rel_Rp_raw = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_rel_Rp_raw);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"rho", "alpha", "sigma", "lnR_raw",
      "lntau_raw", "beta_trans_raw", "lnR_mu", "lntau_mu", "lnR_scale",
      "lntau_scale", "beta_trans_mu", "beta_trans_scale", "sigma_rel_y_raw",
      "sigma_rel_Rp_raw", "lnR", "R", "lntau", "beta_trans", "beta",
      "sigma_y", "sigma_Rp", "sq_sigma", "y_hat", "Rp_hat", "lnR_raw_gp",
      "R_gp"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(K)
                                                                   ,
                                                                   static_cast<size_t>(D)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K)}, std::vector<size_t>{
      }, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "rho" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "lnR_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "lntau_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta_trans_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lnR_mu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lntau_mu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lnR_scale" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lntau_scale" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_trans_mu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_trans_scale" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma_rel_y_raw");
    param_names__.emplace_back(std::string() + "sigma_rel_Rp_raw");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "lnR" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "R" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "lntau" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_trans" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "sigma_y" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigma_Rp" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sq_sigma" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Rp_hat" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "lnR_raw_gp" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "R_gp" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "rho" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "lnR_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "lntau_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta_trans_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lnR_mu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lntau_mu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lnR_scale" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lntau_scale" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_trans_mu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_trans_scale" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma_rel_y_raw");
    param_names__.emplace_back(std::string() + "sigma_rel_Rp_raw");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "lnR" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "R" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "lntau" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_trans" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "sigma_y" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigma_Rp" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sq_sigma" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Rp_hat" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "lnR_raw_gp" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "R_gp" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"rho\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(D) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"lnR_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"lntau_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"beta_trans_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"lnR_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"lntau_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"lnR_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"lntau_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"beta_trans_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"beta_trans_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma_rel_y_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_rel_Rp_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lnR\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"lntau\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"beta_trans\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_y\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_Rp\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sq_sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"Rp_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lnR_raw_gp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"generated_quantities\"},{\"name\":\"R_gp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"rho\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(D) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"lnR_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"lntau_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"beta_trans_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"lnR_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"lntau_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"lnR_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"lntau_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"beta_trans_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"beta_trans_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma_rel_y_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_rel_Rp_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lnR\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"lntau\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"beta_trans\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_y\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_Rp\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sq_sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"Rp_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lnR_raw_gp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"generated_quantities\"},{\"name\":\"R_gp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((((K * D) + K) + K) + (K * N)) + (K * N)) + (K * N)) + K) + K) +
         K) + K) + K) + K) + 1) + 1);
      const size_t num_transformed = 
  ((((((((((K * N) + (K * N)) + (K * N)) + (K * N)) + (K * N)) + (N * M)) +
       N) + K) + (N * M)) + N);
      const size_t num_gen_quantities = 
  ((K * N) + (K * N));
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((((K * D) + K) + K) + (K * N)) + (K * N)) + (K * N)) + K) + K) +
         K) + K) + K) + K) + 1) + 1);
      const size_t num_transformed = 
  ((((((((((K * N) + (K * N)) + (K * N)) + (K * N)) + (K * N)) + (N * M)) +
       N) + K) + (N * M)) + N);
      const size_t num_gen_quantities = 
  ((K * N) + (K * N));
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 14> names__{"rho", "alpha", "sigma",
      "lnR_raw", "lntau_raw", "beta_trans_raw", "lnR_mu", "lntau_mu",
      "lnR_scale", "lntau_scale", "beta_trans_mu", "beta_trans_scale",
      "sigma_rel_y_raw", "sigma_rel_Rp_raw"};
      const std::array<Eigen::Index, 14> constrain_param_sizes__{(K * D), 
       K, K, (K * N), (K * N), (K * N), K, K, K, K, K, K, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = gp_marginal_ZARC_lnR_aniso_model_namespace::gp_marginal_ZARC_lnR_aniso_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return gp_marginal_ZARC_lnR_aniso_model_namespace::profiles__;
}

#endif


