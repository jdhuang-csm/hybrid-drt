
// Code generated by stanc v2.29.2
#include <stan/model/model_header.hpp>
namespace gp_marginal_gaussian_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 141> locations_array__ = 
{" (found before start of program)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 31, column 4 to column 22)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 32, column 4 to column 29)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 33, column 4 to column 29)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 36, column 4 to column 29)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 37, column 4 to column 33)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 38, column 4 to column 40)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 39, column 4 to column 30)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 40, column 4 to column 33)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 41, column 4 to column 19)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 42, column 4 to column 23)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 43, column 4 to column 31)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 44, column 4 to column 35)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 45, column 4 to column 30)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 46, column 4 to column 31)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 53, column 4 to column 25)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 54, column 4 to column 29)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 55, column 4 to column 36)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 56, column 4 to column 42)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 57, column 4 to column 30)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 58, column 4 to column 31)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 59, column 4 to column 32)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 60, column 4 to column 48)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 62, column 4 to column 32)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 65, column 8 to column 47)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 66, column 8 to column 63)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 67, column 8 to column 91)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 68, column 8 to column 44)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 70, column 8 to column 37)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 64, column 19 to line 71, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 64, column 4 to line 71, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 73, column 4 to column 35)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 74, column 4 to column 37)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 131, column 4 to column 30)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 133, column 8 to column 39)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 135, column 12 to column 102)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 134, column 23 to line 136, column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 134, column 8 to line 136, column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 132, column 19 to line 137, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 132, column 4 to line 137, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 78, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 78, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 78, column 4 to column 29)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 82, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 82, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 82, column 23 to column 24)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 82, column 4 to column 30)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 83, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 83, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 83, column 23 to column 24)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 83, column 4 to column 32)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 86, column 8 to column 53)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 89, column 12 to column 58)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 88, column 23 to line 90, column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 88, column 8 to line 90, column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 91, column 8 to column 46)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 85, column 19 to line 92, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 85, column 4 to line 92, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 95, column 4 to column 26)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 96, column 4 to column 25)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 97, column 4 to column 25)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 100, column 8 to column 56)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 101, column 8 to column 60)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 102, column 8 to column 67)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 99, column 19 to line 103, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 99, column 4 to line 103, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 107, column 8 to column 38)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 109, column 12 to column 100)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 108, column 23 to line 110, column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 108, column 8 to line 110, column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 106, column 19 to line 111, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 106, column 4 to line 111, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 114, column 8 to column 44)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 113, column 19 to line 115, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 113, column 4 to line 115, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 119, column 4 to column 30)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 120, column 4 to column 34)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 121, column 4 to column 41)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 122, column 4 to column 26)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 123, column 4 to column 30)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 124, column 4 to column 37)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 127, column 4 to column 34)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 128, column 4 to column 35)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 10, column 4 to column 19)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 11, column 4 to column 19)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 12, column 4 to column 19)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 13, column 4 to column 19)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 14, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 14, column 4 to column 27)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 15, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 15, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 15, column 4 to column 25)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 16, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 16, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 16, column 4 to column 25)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 19, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 19, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 19, column 4 to column 26)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 20, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 20, column 4 to column 26)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 23, column 8 to column 35)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 22, column 19 to line 24, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 22, column 4 to line 24, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 26, column 8 to column 32)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 25, column 19 to line 27, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 25, column 4 to line 27, column 5)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 32, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 33, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 36, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 36, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 37, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 37, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 38, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 38, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 39, column 11 to column 12)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 40, column 11 to column 12)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 41, column 11 to column 12)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 42, column 11 to column 12)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 43, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 44, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 53, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 53, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 54, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 54, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 55, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 55, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 56, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 56, column 29 to column 30)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 57, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 58, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 59, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 60, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 131, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 131, column 20 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 3, column 12 to column 13)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 3, column 5 to column 36)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 4, column 5 to column 43)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 5, column 9 to column 10)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 5, column 2 to column 58)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 6, column 2 to column 19)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/mapping/STAN_M~1/gp_marginal_gaussian.stan', line 2, column 64 to line 7, column 2)"};

struct gaussian_RBF_functor__ {
  template <typename T1__, typename T2__, typename T3__,
            stan::require_col_vector_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr,
            stan::require_stan_scalar_t<T3__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T1__>, T2__, T3__>, -1, 1>
  operator()(const int& M, const T1__& tau, const T2__& tau_0,
             const T3__& sigma, std::ostream* pstream__) const;
};

template <typename T1__, typename T2__, typename T3__,
          stan::require_col_vector_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr,
          stan::require_stan_scalar_t<T3__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T1__>, T2__, T3__>, -1, 1>
  gaussian_RBF(const int& M, const T1__& tau_arg__, const T2__& tau_0,
               const T3__& sigma, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T1__>, T2__, T3__>;
    int current_statement__ = 0; 
    const auto& tau = stan::math::to_ref(tau_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 134;
      stan::math::validate_non_negative_index("r", "M", M);
      Eigen::Matrix<local_scalar_t__, -1, 1> r =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 135;
      stan::model::assign(r, stan::math::log(stan::math::divide(tau, tau_0)),
        "assigning variable r");
      local_scalar_t__ a = DUMMY_VAR__;
      current_statement__ = 136;
      a = (1 / (stan::math::sqrt((2 * stan::math::pi())) * sigma));
      current_statement__ = 137;
      stan::math::validate_non_negative_index("gamma_out", "M", M);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_out =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 138;
      stan::model::assign(gamma_out,
        stan::math::multiply(a,
          stan::math::exp(
            stan::math::multiply(-0.5,
              stan::math::square(stan::math::divide(r, sigma))))),
        "assigning variable gamma_out");
      current_statement__ = 139;
      return gamma_out;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T1__, typename T2__, typename T3__,
          stan::require_col_vector_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*,
          stan::require_stan_scalar_t<T3__>*>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T1__>, T2__, T3__>, -1, 1>
gaussian_RBF_functor__::operator()(const int& M, const T1__& tau,
                                   const T2__& tau_0, const T3__& sigma,
                                   std::ostream* pstream__)  const
{
  return gaussian_RBF(M, tau, tau_0, sigma, pstream__);
}


class gp_marginal_gaussian_model final : public model_base_crtp<gp_marginal_gaussian_model> {

 private:
  int N;
  int D;
  int M;
  int K;
  Eigen::Matrix<double, -1, 1> tau__;
  std::vector<Eigen::Matrix<double, -1, 1>> x;
  std::vector<Eigen::Matrix<double, -1, 1>> y;
  std::vector<Eigen::Matrix<double, -1, 1>> mu;
  Eigen::Matrix<double, -1, 1> Rp__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> tau{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> Rp{nullptr, 0};
 
 public:
  ~gp_marginal_gaussian_model() { }
  
  inline std::string model_name() const final { return "gp_marginal_gaussian_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.2", "stancflags = "};
  }
  
  
  gp_marginal_gaussian_model(stan::io::var_context& context__,
                             unsigned int random_seed__ = 0,
                             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "gp_marginal_gaussian_model_namespace::gp_marginal_gaussian_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 83;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 83;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 83;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 84;
      context__.validate_dims("data initialization","D","int",
           std::vector<size_t>{});
      D = std::numeric_limits<int>::min();
      
      
      current_statement__ = 84;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 84;
      stan::math::check_greater_or_equal(function__, "D", D, 1);
      current_statement__ = 85;
      context__.validate_dims("data initialization","M","int",
           std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      
      
      current_statement__ = 85;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 85;
      stan::math::check_greater_or_equal(function__, "M", M, 1);
      current_statement__ = 86;
      context__.validate_dims("data initialization","K","int",
           std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      
      
      current_statement__ = 86;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 86;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 87;
      stan::math::validate_non_negative_index("tau", "M", M);
      current_statement__ = 88;
      context__.validate_dims("data initialization","tau","double",
           std::vector<size_t>{static_cast<size_t>(M)});
      tau__ = 
        Eigen::Matrix<double, -1, 1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      new (&tau) Eigen::Map<Eigen::Matrix<double, -1, 1>>(tau__.data(), M);
      
      {
        std::vector<local_scalar_t__> tau_flat__;
        current_statement__ = 88;
        tau_flat__ = context__.vals_r("tau");
        current_statement__ = 88;
        pos__ = 1;
        current_statement__ = 88;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 88;
          stan::model::assign(tau, tau_flat__[(pos__ - 1)],
            "assigning variable tau", stan::model::index_uni(sym1__));
          current_statement__ = 88;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 88;
      stan::math::check_greater_or_equal(function__, "tau", tau, 0);
      current_statement__ = 89;
      stan::math::validate_non_negative_index("x", "N", N);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("x", "D", D);
      current_statement__ = 91;
      context__.validate_dims("data initialization","x","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(D)});
      x = 
        std::vector<Eigen::Matrix<double, -1, 1>>(N, 
          Eigen::Matrix<double, -1, 1>::Constant(D,
            std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 91;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 91;
        pos__ = 1;
        current_statement__ = 91;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 91;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 91;
            stan::model::assign(x, x_flat__[(pos__ - 1)],
              "assigning variable x", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
            current_statement__ = 91;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 92;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("y", "M", M);
      current_statement__ = 94;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(M)});
      y = 
        std::vector<Eigen::Matrix<double, -1, 1>>(N, 
          Eigen::Matrix<double, -1, 1>::Constant(M,
            std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 94;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 94;
        pos__ = 1;
        current_statement__ = 94;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 94;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 94;
            stan::model::assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
            current_statement__ = 94;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 95;
      stan::math::validate_non_negative_index("mu", "K", K);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("mu", "N", N);
      current_statement__ = 97;
      mu = 
        std::vector<Eigen::Matrix<double, -1, 1>>(K, 
          Eigen::Matrix<double, -1, 1>::Constant(N,
            std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 98;
      stan::math::validate_non_negative_index("Rp", "N", N);
      current_statement__ = 99;
      Rp__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&Rp) Eigen::Map<Eigen::Matrix<double, -1, 1>>(Rp__.data(), N);
      
      current_statement__ = 102;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 100;
        stan::model::assign(mu, stan::math::rep_vector(0.0, N),
          "assigning variable mu", stan::model::index_uni(k));
      }
      current_statement__ = 105;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 103;
        stan::model::assign(Rp,
          stan::math::sum(
            stan::math::fabs(
              stan::model::rvalue(y, "y", stan::model::index_uni(n)))),
          "assigning variable Rp", stan::model::index_uni(n));
      }
      current_statement__ = 99;
      stan::math::check_greater_or_equal(function__, "Rp", Rp, 0);
      current_statement__ = 106;
      stan::math::validate_non_negative_index("alpha", "K", K);
      current_statement__ = 107;
      stan::math::validate_non_negative_index("sigma", "K", K);
      current_statement__ = 108;
      stan::math::validate_non_negative_index("R_raw", "K", K);
      current_statement__ = 109;
      stan::math::validate_non_negative_index("R_raw", "N", N);
      current_statement__ = 110;
      stan::math::validate_non_negative_index("lntau_raw", "K", K);
      current_statement__ = 111;
      stan::math::validate_non_negative_index("lntau_raw", "N", N);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("ln_sigma_rbf_raw", "K", K);
      current_statement__ = 113;
      stan::math::validate_non_negative_index("ln_sigma_rbf_raw", "N", N);
      current_statement__ = 114;
      stan::math::validate_non_negative_index("ln_sigma_rbf_mu", "K", K);
      current_statement__ = 115;
      stan::math::validate_non_negative_index("ln_sigma_rbf_scale", "K", K);
      current_statement__ = 116;
      stan::math::validate_non_negative_index("R_mu", "K", K);
      current_statement__ = 117;
      stan::math::validate_non_negative_index("lntau_mu", "K", K);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("R_scale", "K", K);
      current_statement__ = 119;
      stan::math::validate_non_negative_index("lntau_scale", "K", K);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("R", "K", K);
      current_statement__ = 121;
      stan::math::validate_non_negative_index("R", "N", N);
      current_statement__ = 122;
      stan::math::validate_non_negative_index("lntau", "K", K);
      current_statement__ = 123;
      stan::math::validate_non_negative_index("lntau", "N", N);
      current_statement__ = 124;
      stan::math::validate_non_negative_index("ln_sigma_rbf", "K", K);
      current_statement__ = 125;
      stan::math::validate_non_negative_index("ln_sigma_rbf", "N", N);
      current_statement__ = 126;
      stan::math::validate_non_negative_index("sigma_rbf", "K", K);
      current_statement__ = 127;
      stan::math::validate_non_negative_index("sigma_rbf", "N", N);
      current_statement__ = 128;
      stan::math::validate_non_negative_index("Rp_hat", "N", N);
      current_statement__ = 129;
      stan::math::validate_non_negative_index("sigma_y", "N", N);
      current_statement__ = 130;
      stan::math::validate_non_negative_index("sigma_Rp", "N", N);
      current_statement__ = 131;
      stan::math::validate_non_negative_index("sq_sigma", "K", K);
      current_statement__ = 132;
      stan::math::validate_non_negative_index("y_pred", "N", N);
      current_statement__ = 133;
      stan::math::validate_non_negative_index("y_pred", "M", M);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + K + K + (K * N) + (K * N) + (K * N) + K + K + 
      K + K + K + K + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "gp_marginal_gaussian_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ rho = DUMMY_VAR__;
      current_statement__ = 1;
      rho = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 2;
      alpha = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__,
                K);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__,
                K);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> R_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      current_statement__ = 4;
      R_raw = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(K, N);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> lntau_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      current_statement__ = 5;
      lntau_raw = in__.template read<
                    std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(K,
                    N);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> ln_sigma_rbf_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      current_statement__ = 6;
      ln_sigma_rbf_raw = in__.template read<
                           std::vector<
                             Eigen::Matrix<local_scalar_t__, -1, 1>>>(K, N);
      Eigen::Matrix<local_scalar_t__, -1, 1> ln_sigma_rbf_mu =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 7;
      ln_sigma_rbf_mu = in__.template read<
                          Eigen::Matrix<local_scalar_t__, -1, 1>>(K);
      Eigen::Matrix<local_scalar_t__, -1, 1> ln_sigma_rbf_scale =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 8;
      ln_sigma_rbf_scale = in__.template read<
                             Eigen::Matrix<local_scalar_t__, -1, 1>>(K);
      Eigen::Matrix<local_scalar_t__, -1, 1> R_mu =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 9;
      R_mu = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(K);
      Eigen::Matrix<local_scalar_t__, -1, 1> lntau_mu =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 10;
      lntau_mu = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   K);
      Eigen::Matrix<local_scalar_t__, -1, 1> R_scale =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 11;
      R_scale = in__.template read_constrain_lb<
                  Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                  lp__, K);
      Eigen::Matrix<local_scalar_t__, -1, 1> lntau_scale =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 12;
      lntau_scale = in__.template read_constrain_lb<
                      Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                      lp__, K);
      local_scalar_t__ sigma_rel_y = DUMMY_VAR__;
      current_statement__ = 13;
      sigma_rel_y = in__.template read_constrain_lb<local_scalar_t__, 
                      jacobian__>(0, lp__);
      local_scalar_t__ sigma_rel_Rp = DUMMY_VAR__;
      current_statement__ = 14;
      sigma_rel_Rp = in__.template read_constrain_lb<local_scalar_t__, 
                       jacobian__>(0, lp__);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> R =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> lntau =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> ln_sigma_rbf =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> sigma_rbf =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__, -1, 1> Rp_hat =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_y =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_Rp =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> sq_sigma =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 22;
      stan::model::assign(sq_sigma, stan::math::square(sigma),
        "assigning variable sq_sigma");
      current_statement__ = 23;
      stan::model::assign(Rp_hat, stan::math::rep_vector(0.0, N),
        "assigning variable Rp_hat");
      current_statement__ = 30;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 24;
        stan::model::assign(R,
          stan::math::add(
            stan::model::rvalue(R_mu, "R_mu", stan::model::index_uni(k)),
            stan::math::multiply(
              stan::model::rvalue(R_raw, "R_raw", stan::model::index_uni(k)),
              stan::model::rvalue(R_scale, "R_scale",
                stan::model::index_uni(k)))),
          "assigning variable R", stan::model::index_uni(k));
        current_statement__ = 25;
        stan::model::assign(lntau,
          stan::math::add(
            stan::model::rvalue(lntau_mu, "lntau_mu",
              stan::model::index_uni(k)),
            stan::math::multiply(
              stan::model::rvalue(lntau_raw, "lntau_raw",
                stan::model::index_uni(k)),
              stan::model::rvalue(lntau_scale, "lntau_scale",
                stan::model::index_uni(k)))),
          "assigning variable lntau", stan::model::index_uni(k));
        current_statement__ = 26;
        stan::model::assign(ln_sigma_rbf,
          stan::math::add(
            stan::model::rvalue(ln_sigma_rbf_mu, "ln_sigma_rbf_mu",
              stan::model::index_uni(k)),
            stan::math::multiply(
              stan::model::rvalue(ln_sigma_rbf_raw, "ln_sigma_rbf_raw",
                stan::model::index_uni(k)),
              stan::model::rvalue(ln_sigma_rbf_scale, "ln_sigma_rbf_scale",
                stan::model::index_uni(k)))),
          "assigning variable ln_sigma_rbf", stan::model::index_uni(k));
        current_statement__ = 27;
        stan::model::assign(sigma_rbf,
          stan::math::exp(
            stan::model::rvalue(ln_sigma_rbf, "ln_sigma_rbf",
              stan::model::index_uni(k))),
          "assigning variable sigma_rbf", stan::model::index_uni(k));
        current_statement__ = 28;
        stan::model::assign(Rp_hat,
          stan::math::add(stan::model::deep_copy(Rp_hat),
            stan::math::fabs(
              stan::model::rvalue(R, "R", stan::model::index_uni(k)))),
          "assigning variable Rp_hat");
      }
      current_statement__ = 31;
      stan::model::assign(sigma_y, stan::math::multiply(sigma_rel_y, Rp_hat),
        "assigning variable sigma_y");
      current_statement__ = 32;
      stan::model::assign(sigma_Rp,
        stan::math::multiply(sigma_rel_Rp, Rp_hat),
        "assigning variable sigma_Rp");
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "sigma_rbf", sigma_rbf,
                                            0);
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "Rp_hat", Rp_hat, 0);
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "sigma_y", sigma_y, 0);
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "sigma_Rp", sigma_Rp, 0);
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "sq_sigma", sq_sigma, 0);
      {
        current_statement__ = 40;
        stan::math::validate_non_negative_index("y_hat", "N", N);
        current_statement__ = 41;
        stan::math::validate_non_negative_index("y_hat", "M", M);
        std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> y_hat =
           std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, 
             Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__));
        current_statement__ = 43;
        stan::math::validate_non_negative_index("L_K", "K", K);
        current_statement__ = 44;
        stan::math::validate_non_negative_index("L_K", "N", N);
        current_statement__ = 45;
        stan::math::validate_non_negative_index("L_K", "N", N);
        std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> L_K =
           std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(K, 
             Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, N,
               DUMMY_VAR__));
        current_statement__ = 47;
        stan::math::validate_non_negative_index("K_cov", "K", K);
        current_statement__ = 48;
        stan::math::validate_non_negative_index("K_cov", "N", N);
        current_statement__ = 49;
        stan::math::validate_non_negative_index("K_cov", "N", N);
        std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> K_cov =
           std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(K, 
             Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, N,
               DUMMY_VAR__));
        current_statement__ = 57;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 51;
          stan::model::assign(K_cov,
            stan::math::gp_exp_quad_cov(x,
              stan::model::rvalue(alpha, "alpha", stan::model::index_uni(k)),
              rho), "assigning variable K_cov", stan::model::index_uni(k));
          current_statement__ = 54;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 52;
            stan::model::assign(K_cov,
              (stan::model::rvalue(
                 stan::model::rvalue(K_cov, "K_cov", stan::model::index_uni(k)),
                 "K_cov[k]",
                 stan::model::index_uni(n), stan::model::index_uni(n)) +
                stan::model::rvalue(sq_sigma, "sq_sigma",
                  stan::model::index_uni(k))),
              "assigning variable K_cov", stan::model::index_uni(k),
                                            stan::model::index_uni(n),
                                            stan::model::index_uni(n));
          }
          current_statement__ = 55;
          stan::model::assign(L_K,
            stan::math::cholesky_decompose(
              stan::model::rvalue(K_cov, "K_cov", stan::model::index_uni(k))),
            "assigning variable L_K", stan::model::index_uni(k));
        }
        current_statement__ = 58;
        lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(rho, 5, 5));
        current_statement__ = 59;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(alpha));
        current_statement__ = 60;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(sigma));
        current_statement__ = 65;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 61;
          lp_accum__.add(
            stan::math::multi_normal_cholesky_lpdf<propto__>(
              stan::model::rvalue(R_raw, "R_raw", stan::model::index_uni(k)),
              stan::model::rvalue(mu, "mu", stan::model::index_uni(k)),
              stan::model::rvalue(L_K, "L_K", stan::model::index_uni(k))));
          current_statement__ = 62;
          lp_accum__.add(
            stan::math::multi_normal_cholesky_lpdf<propto__>(
              stan::model::rvalue(lntau_raw, "lntau_raw",
                stan::model::index_uni(k)),
              stan::model::rvalue(mu, "mu", stan::model::index_uni(k)),
              stan::model::rvalue(L_K, "L_K", stan::model::index_uni(k))));
          current_statement__ = 63;
          lp_accum__.add(
            stan::math::multi_normal_cholesky_lpdf<propto__>(
              stan::model::rvalue(ln_sigma_rbf_raw, "ln_sigma_rbf_raw",
                stan::model::index_uni(k)),
              stan::model::rvalue(mu, "mu", stan::model::index_uni(k)),
              stan::model::rvalue(L_K, "L_K", stan::model::index_uni(k))));
        }
        current_statement__ = 71;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 66;
          stan::model::assign(y_hat, stan::math::rep_vector(0.0, M),
            "assigning variable y_hat", stan::model::index_uni(n));
          current_statement__ = 69;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 67;
            stan::model::assign(y_hat,
              stan::math::add(
                stan::model::deep_copy(
                  stan::model::rvalue(y_hat, "y_hat",
                    stan::model::index_uni(n))),
                stan::math::multiply(
                  stan::model::rvalue(
                    stan::model::rvalue(R, "R", stan::model::index_uni(k)),
                    "R[k]", stan::model::index_uni(n)),
                  gaussian_RBF(M, tau,
                    stan::math::exp(
                      stan::model::rvalue(
                        stan::model::rvalue(lntau, "lntau", stan::model::index_uni(k)),
                        "lntau[k]", stan::model::index_uni(n))),
                    stan::model::rvalue(
                      stan::model::rvalue(sigma_rbf, "sigma_rbf", stan::model::index_uni(k)),
                      "sigma_rbf[k]", stan::model::index_uni(n)), pstream__))),
              "assigning variable y_hat", stan::model::index_uni(n));
          }
        }
        current_statement__ = 74;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 72;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(y, "y", stan::model::index_uni(n)),
              stan::model::rvalue(y_hat, "y_hat", stan::model::index_uni(n)),
              stan::model::rvalue(sigma_y, "sigma_y",
                stan::model::index_uni(n))));
        }
        current_statement__ = 75;
        lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(R_scale, 1, 1));
        current_statement__ = 76;
        lp_accum__.add(
          stan::math::inv_gamma_lpdf<propto__>(lntau_scale, 1, 1));
        current_statement__ = 77;
        lp_accum__.add(
          stan::math::inv_gamma_lpdf<propto__>(ln_sigma_rbf_scale, 1, 1));
        current_statement__ = 78;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(R_mu, 0, 100));
        current_statement__ = 79;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(lntau_mu, 0, 100));
        current_statement__ = 80;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(ln_sigma_rbf_mu, 0, 100));
        current_statement__ = 81;
        lp_accum__.add(
          stan::math::inv_gamma_lpdf<propto__>(sigma_rel_y, 2, 1));
        current_statement__ = 82;
        lp_accum__.add(
          stan::math::inv_gamma_lpdf<propto__>(sigma_rel_Rp, 2, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "gp_marginal_gaussian_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double rho = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      rho = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<double, -1, 1> alpha =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      alpha = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__,
                K);
      Eigen::Matrix<double, -1, 1> sigma =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__,
                K);
      std::vector<Eigen::Matrix<double, -1, 1>> R_raw =
         std::vector<Eigen::Matrix<double, -1, 1>>(K, 
           Eigen::Matrix<double, -1, 1>::Constant(N,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 4;
      R_raw = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(K, N);
      std::vector<Eigen::Matrix<double, -1, 1>> lntau_raw =
         std::vector<Eigen::Matrix<double, -1, 1>>(K, 
           Eigen::Matrix<double, -1, 1>::Constant(N,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 5;
      lntau_raw = in__.template read<
                    std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(K,
                    N);
      std::vector<Eigen::Matrix<double, -1, 1>> ln_sigma_rbf_raw =
         std::vector<Eigen::Matrix<double, -1, 1>>(K, 
           Eigen::Matrix<double, -1, 1>::Constant(N,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 6;
      ln_sigma_rbf_raw = in__.template read<
                           std::vector<
                             Eigen::Matrix<local_scalar_t__, -1, 1>>>(K, N);
      Eigen::Matrix<double, -1, 1> ln_sigma_rbf_mu =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      ln_sigma_rbf_mu = in__.template read<
                          Eigen::Matrix<local_scalar_t__, -1, 1>>(K);
      Eigen::Matrix<double, -1, 1> ln_sigma_rbf_scale =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      ln_sigma_rbf_scale = in__.template read<
                             Eigen::Matrix<local_scalar_t__, -1, 1>>(K);
      Eigen::Matrix<double, -1, 1> R_mu =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      R_mu = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(K);
      Eigen::Matrix<double, -1, 1> lntau_mu =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 10;
      lntau_mu = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   K);
      Eigen::Matrix<double, -1, 1> R_scale =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 11;
      R_scale = in__.template read_constrain_lb<
                  Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                  lp__, K);
      Eigen::Matrix<double, -1, 1> lntau_scale =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      lntau_scale = in__.template read_constrain_lb<
                      Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                      lp__, K);
      double sigma_rel_y = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 13;
      sigma_rel_y = in__.template read_constrain_lb<local_scalar_t__, 
                      jacobian__>(0, lp__);
      double sigma_rel_Rp = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 14;
      sigma_rel_Rp = in__.template read_constrain_lb<local_scalar_t__, 
                       jacobian__>(0, lp__);
      std::vector<Eigen::Matrix<double, -1, 1>> R =
         std::vector<Eigen::Matrix<double, -1, 1>>(K, 
           Eigen::Matrix<double, -1, 1>::Constant(N,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> lntau =
         std::vector<Eigen::Matrix<double, -1, 1>>(K, 
           Eigen::Matrix<double, -1, 1>::Constant(N,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> ln_sigma_rbf =
         std::vector<Eigen::Matrix<double, -1, 1>>(K, 
           Eigen::Matrix<double, -1, 1>::Constant(N,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> sigma_rbf =
         std::vector<Eigen::Matrix<double, -1, 1>>(K, 
           Eigen::Matrix<double, -1, 1>::Constant(N,
             std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double, -1, 1> Rp_hat =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> sigma_y =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> sigma_Rp =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> sq_sigma =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(rho);
      out__.write(alpha);
      out__.write(sigma);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          out__.write(R_raw[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          out__.write(lntau_raw[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          out__.write(ln_sigma_rbf_raw[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(ln_sigma_rbf_mu);
      out__.write(ln_sigma_rbf_scale);
      out__.write(R_mu);
      out__.write(lntau_mu);
      out__.write(R_scale);
      out__.write(lntau_scale);
      out__.write(sigma_rel_y);
      out__.write(sigma_rel_Rp);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 22;
      stan::model::assign(sq_sigma, stan::math::square(sigma),
        "assigning variable sq_sigma");
      current_statement__ = 23;
      stan::model::assign(Rp_hat, stan::math::rep_vector(0.0, N),
        "assigning variable Rp_hat");
      current_statement__ = 30;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 24;
        stan::model::assign(R,
          stan::math::add(
            stan::model::rvalue(R_mu, "R_mu", stan::model::index_uni(k)),
            stan::math::multiply(
              stan::model::rvalue(R_raw, "R_raw", stan::model::index_uni(k)),
              stan::model::rvalue(R_scale, "R_scale",
                stan::model::index_uni(k)))),
          "assigning variable R", stan::model::index_uni(k));
        current_statement__ = 25;
        stan::model::assign(lntau,
          stan::math::add(
            stan::model::rvalue(lntau_mu, "lntau_mu",
              stan::model::index_uni(k)),
            stan::math::multiply(
              stan::model::rvalue(lntau_raw, "lntau_raw",
                stan::model::index_uni(k)),
              stan::model::rvalue(lntau_scale, "lntau_scale",
                stan::model::index_uni(k)))),
          "assigning variable lntau", stan::model::index_uni(k));
        current_statement__ = 26;
        stan::model::assign(ln_sigma_rbf,
          stan::math::add(
            stan::model::rvalue(ln_sigma_rbf_mu, "ln_sigma_rbf_mu",
              stan::model::index_uni(k)),
            stan::math::multiply(
              stan::model::rvalue(ln_sigma_rbf_raw, "ln_sigma_rbf_raw",
                stan::model::index_uni(k)),
              stan::model::rvalue(ln_sigma_rbf_scale, "ln_sigma_rbf_scale",
                stan::model::index_uni(k)))),
          "assigning variable ln_sigma_rbf", stan::model::index_uni(k));
        current_statement__ = 27;
        stan::model::assign(sigma_rbf,
          stan::math::exp(
            stan::model::rvalue(ln_sigma_rbf, "ln_sigma_rbf",
              stan::model::index_uni(k))),
          "assigning variable sigma_rbf", stan::model::index_uni(k));
        current_statement__ = 28;
        stan::model::assign(Rp_hat,
          stan::math::add(stan::model::deep_copy(Rp_hat),
            stan::math::fabs(
              stan::model::rvalue(R, "R", stan::model::index_uni(k)))),
          "assigning variable Rp_hat");
      }
      current_statement__ = 31;
      stan::model::assign(sigma_y, stan::math::multiply(sigma_rel_y, Rp_hat),
        "assigning variable sigma_y");
      current_statement__ = 32;
      stan::model::assign(sigma_Rp,
        stan::math::multiply(sigma_rel_Rp, Rp_hat),
        "assigning variable sigma_Rp");
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "sigma_rbf", sigma_rbf,
                                            0);
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "Rp_hat", Rp_hat, 0);
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "sigma_y", sigma_y, 0);
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "sigma_Rp", sigma_Rp, 0);
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "sq_sigma", sq_sigma, 0);
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            out__.write(R[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            out__.write(lntau[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            out__.write(ln_sigma_rbf[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            out__.write(sigma_rbf[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(Rp_hat);
        out__.write(sigma_y);
        out__.write(sigma_Rp);
        out__.write(sq_sigma);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<Eigen::Matrix<double, -1, 1>> y_pred =
         std::vector<Eigen::Matrix<double, -1, 1>>(N, 
           Eigen::Matrix<double, -1, 1>::Constant(M,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 39;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 34;
        stan::model::assign(y_pred, stan::math::rep_vector(0.0, M),
          "assigning variable y_pred", stan::model::index_uni(n));
        current_statement__ = 37;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 35;
          stan::model::assign(y_pred,
            stan::math::add(
              stan::model::deep_copy(
                stan::model::rvalue(y_pred, "y_pred",
                  stan::model::index_uni(n))),
              stan::math::multiply(
                stan::model::rvalue(
                  stan::model::rvalue(R, "R", stan::model::index_uni(k)),
                  "R[k]", stan::model::index_uni(n)),
                gaussian_RBF(M, tau,
                  stan::math::exp(
                    stan::model::rvalue(
                      stan::model::rvalue(lntau, "lntau", stan::model::index_uni(k)),
                      "lntau[k]", stan::model::index_uni(n))),
                  stan::model::rvalue(
                    stan::model::rvalue(sigma_rbf, "sigma_rbf", stan::model::index_uni(k)),
                    "sigma_rbf[k]", stan::model::index_uni(n)), pstream__))),
            "assigning variable y_pred", stan::model::index_uni(n));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(y_pred[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ rho = DUMMY_VAR__;
      rho = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, rho);
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(alpha, in__.read<local_scalar_t__>(),
          "assigning variable alpha", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, alpha);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(sigma, in__.read<local_scalar_t__>(),
          "assigning variable sigma", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, sigma);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> R_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          stan::model::assign(R_raw, in__.read<local_scalar_t__>(),
            "assigning variable R_raw", stan::model::index_uni(sym2__),
                                          stan::model::index_uni(sym1__));
        }
      }
      out__.write(R_raw);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> lntau_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          stan::model::assign(lntau_raw, in__.read<local_scalar_t__>(),
            "assigning variable lntau_raw", stan::model::index_uni(sym2__),
                                              stan::model::index_uni(sym1__));
        }
      }
      out__.write(lntau_raw);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> ln_sigma_rbf_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          stan::model::assign(ln_sigma_rbf_raw,
            in__.read<local_scalar_t__>(),
            "assigning variable ln_sigma_rbf_raw", stan::model::index_uni(sym2__),
                                                     stan::model::index_uni(sym1__));
        }
      }
      out__.write(ln_sigma_rbf_raw);
      Eigen::Matrix<local_scalar_t__, -1, 1> ln_sigma_rbf_mu =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(ln_sigma_rbf_mu, in__.read<local_scalar_t__>(),
          "assigning variable ln_sigma_rbf_mu", stan::model::index_uni(sym1__));
      }
      out__.write(ln_sigma_rbf_mu);
      Eigen::Matrix<local_scalar_t__, -1, 1> ln_sigma_rbf_scale =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(ln_sigma_rbf_scale,
          in__.read<local_scalar_t__>(),
          "assigning variable ln_sigma_rbf_scale", stan::model::index_uni(sym1__));
      }
      out__.write(ln_sigma_rbf_scale);
      Eigen::Matrix<local_scalar_t__, -1, 1> R_mu =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(R_mu, in__.read<local_scalar_t__>(),
          "assigning variable R_mu", stan::model::index_uni(sym1__));
      }
      out__.write(R_mu);
      Eigen::Matrix<local_scalar_t__, -1, 1> lntau_mu =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(lntau_mu, in__.read<local_scalar_t__>(),
          "assigning variable lntau_mu", stan::model::index_uni(sym1__));
      }
      out__.write(lntau_mu);
      Eigen::Matrix<local_scalar_t__, -1, 1> R_scale =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(R_scale, in__.read<local_scalar_t__>(),
          "assigning variable R_scale", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, R_scale);
      Eigen::Matrix<local_scalar_t__, -1, 1> lntau_scale =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(lntau_scale, in__.read<local_scalar_t__>(),
          "assigning variable lntau_scale", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, lntau_scale);
      local_scalar_t__ sigma_rel_y = DUMMY_VAR__;
      sigma_rel_y = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_rel_y);
      local_scalar_t__ sigma_rel_Rp = DUMMY_VAR__;
      sigma_rel_Rp = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_rel_Rp);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"rho", "alpha", "sigma", "R_raw",
      "lntau_raw", "ln_sigma_rbf_raw", "ln_sigma_rbf_mu",
      "ln_sigma_rbf_scale", "R_mu", "lntau_mu", "R_scale", "lntau_scale",
      "sigma_rel_y", "sigma_rel_Rp", "R", "lntau", "ln_sigma_rbf",
      "sigma_rbf", "Rp_hat", "sigma_y", "sigma_Rp", "sq_sigma", "y_pred"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K)}, std::vector<size_t>{
      }, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "rho");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "R_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "lntau_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "ln_sigma_rbf_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ln_sigma_rbf_mu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ln_sigma_rbf_scale" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "R_mu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lntau_mu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "R_scale" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lntau_scale" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma_rel_y");
    param_names__.emplace_back(std::string() + "sigma_rel_Rp");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "R" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "lntau" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ln_sigma_rbf" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "sigma_rbf" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Rp_hat" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigma_y" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigma_Rp" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sq_sigma" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "rho");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "R_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "lntau_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "ln_sigma_rbf_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ln_sigma_rbf_mu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ln_sigma_rbf_scale" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "R_mu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lntau_mu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "R_scale" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lntau_scale" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma_rel_y");
    param_names__.emplace_back(std::string() + "sigma_rel_Rp");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "R" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "lntau" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ln_sigma_rbf" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "sigma_rbf" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Rp_hat" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigma_y" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigma_Rp" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sq_sigma" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"R_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"lntau_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"ln_sigma_rbf_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"ln_sigma_rbf_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"ln_sigma_rbf_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"R_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"lntau_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"R_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"lntau_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma_rel_y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_rel_Rp\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"lntau\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"ln_sigma_rbf\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_rbf\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"Rp_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_y\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_Rp\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sq_sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"R_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"lntau_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"ln_sigma_rbf_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"ln_sigma_rbf_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"ln_sigma_rbf_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"R_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"lntau_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"R_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"lntau_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma_rel_y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_rel_Rp\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"lntau\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"ln_sigma_rbf\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_rbf\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"Rp_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_y\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_Rp\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sq_sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((((((((1 + K) + K) + (K * N)) + (K * N)) + (K * N)) + K) + K) + K) +
        K) + K) + K) + 1) + 1);
      const size_t num_transformed = 
  ((((((((K * N) + (K * N)) + (K * N)) + (K * N)) + N) + N) + N) + K);
      const size_t num_gen_quantities = 
  (N * M);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((((((((1 + K) + K) + (K * N)) + (K * N)) + (K * N)) + K) + K) + K) +
        K) + K) + K) + 1) + 1);
      const size_t num_transformed = 
  ((((((((K * N) + (K * N)) + (K * N)) + (K * N)) + N) + N) + N) + K);
      const size_t num_gen_quantities = 
  (N * M);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 14> names__{"rho", "alpha", "sigma",
      "R_raw", "lntau_raw", "ln_sigma_rbf_raw", "ln_sigma_rbf_mu",
      "ln_sigma_rbf_scale", "R_mu", "lntau_mu", "R_scale", "lntau_scale",
      "sigma_rel_y", "sigma_rel_Rp"};
      const std::array<Eigen::Index, 14> constrain_param_sizes__{1, K, 
       K, (K * N), (K * N), (K * N), K, K, K, K, K, K, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = gp_marginal_gaussian_model_namespace::gp_marginal_gaussian_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return gp_marginal_gaussian_model_namespace::profiles__;
}

#endif


