
// Code generated by stanc v2.29.2
#include <stan/model/model_header.hpp>
namespace HN_series_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 67> locations_array__ = 
{" (found before start of program)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 44, column 1 to column 25)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 45, column 1 to column 25)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 48, column 1 to column 29)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 49, column 1 to column 60)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 51, column 1 to column 37)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 52, column 1 to column 36)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 54, column 1 to column 25)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 58, column 1 to column 47)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 59, column 1 to column 47)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 62, column 1 to column 49)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 65, column 1 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 66, column 1 to column 38)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 67, column 1 to column 38)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 71, column 2 to column 33)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 73, column 3 to column 47)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 74, column 3 to column 47)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 75, column 3 to column 44)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 76, column 3 to column 44)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 77, column 3 to column 47)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 78, column 3 to column 47)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 72, column 16 to line 79, column 3)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 72, column 2 to line 79, column 3)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 70, column 15 to line 80, column 2)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 70, column 1 to line 80, column 2)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 82, column 1 to column 19)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 83, column 1 to column 27)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 84, column 1 to column 40)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 88, column 1 to column 26)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 89, column 1 to column 26)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 92, column 1 to column 25)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 95, column 1 to column 40)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 96, column 1 to column 43)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 19, column 1 to column 16)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 20, column 1 to column 16)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 23, column 8 to column 13)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 23, column 1 to column 17)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 24, column 8 to column 13)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 24, column 1 to column 23)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 25, column 8 to column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 25, column 1 to column 16)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 28, column 1 to column 26)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 29, column 1 to column 26)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 32, column 1 to column 27)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 33, column 1 to column 27)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 34, column 1 to column 26)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 35, column 1 to column 32)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 38, column 8 to column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 38, column 1 to column 35)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 39, column 1 to column 37)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 40, column 1 to column 37)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 48, column 17 to column 18)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 49, column 48 to column 49)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 51, column 25 to column 26)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 52, column 25 to column 26)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 62, column 17 to column 18)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 65, column 8 to column 13)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 66, column 8 to column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 67, column 8 to column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 4, column 2 to column 60)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 2, column 45 to line 5, column 2)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 8, column 2 to column 56)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 6, column 44 to line 9, column 2)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 11, column 2 to column 50)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 10, column 43 to line 12, column 2)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 14, column 2 to column 30)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/HYBRID~1/hybdrt/STAN_M~1/HN_series.stan', line 13, column 43 to line 15, column 2)"};

struct theta_hn_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  operator()(const T0__& alpha, const T1__& x, const T2__& y,
             std::ostream* pstream__) const;
};
struct z_mod_hn_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  operator()(const T0__& alpha, const T1__& x, const T2__& y,
             std::ostream* pstream__) const;
};
struct hn_x_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  operator()(const T0__& omega, const T1__& tau0, const T2__& beta,
             std::ostream* pstream__) const;
};
struct hn_y_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  operator()(const T0__& omega, const T1__& tau0, const T2__& beta,
             std::ostream* pstream__) const;
};

template <typename T0__, typename T1__, typename T2__,
          stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  hn_x(const T0__& omega, const T1__& tau0, const T2__& beta,
       std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 59;
      return (1 +
               (stan::math::pow((omega * tau0), beta) *
                 stan::math::cos(((beta * stan::math::pi()) / 2))));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  hn_y(const T0__& omega, const T1__& tau0, const T2__& beta,
       std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 61;
      return (stan::math::pow((omega * tau0), beta) *
               stan::math::sin(((beta * stan::math::pi()) / 2)));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  z_mod_hn(const T0__& alpha, const T1__& x, const T2__& y,
           std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 63;
      return stan::math::pow(
               stan::math::sqrt(
                 (stan::math::square(x) + stan::math::square(y))), -alpha);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  theta_hn(const T0__& alpha, const T1__& x, const T2__& y,
           std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 65;
      return (-alpha * stan::math::atan2(y, x));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_stan_scalar_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*>
stan::promote_args_t<T0__, T1__, T2__>
theta_hn_functor__::operator()(const T0__& alpha, const T1__& x,
                               const T2__& y, std::ostream* pstream__)  const
{
  return theta_hn(alpha, x, y, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_stan_scalar_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*>
stan::promote_args_t<T0__, T1__, T2__>
z_mod_hn_functor__::operator()(const T0__& alpha, const T1__& x,
                               const T2__& y, std::ostream* pstream__)  const
{
  return z_mod_hn(alpha, x, y, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_stan_scalar_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*>
stan::promote_args_t<T0__, T1__, T2__>
hn_x_functor__::operator()(const T0__& omega, const T1__& tau0,
                           const T2__& beta, std::ostream* pstream__)  const
{
  return hn_x(omega, tau0, beta, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_stan_scalar_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*>
stan::promote_args_t<T0__, T1__, T2__>
hn_y_functor__::operator()(const T0__& omega, const T1__& tau0,
                           const T2__& beta, std::ostream* pstream__)  const
{
  return hn_y(omega, tau0, beta, pstream__);
}

 class HN_series_model final : public model_base_crtp<HN_series_model> {

 private:
  int N;
  int K;
  Eigen::Matrix<double, -1, 1> z__;
  Eigen::Matrix<double, -1, 1> sigma_z__;
  Eigen::Matrix<double, -1, 1> freq__;
  double min_tau_hn;
  double max_tau_hn;
  double induc_scale;
  double r_inf_scale;
  double r_hn_scale;
  double sigma_min_lambda;
  Eigen::Matrix<double, -1, 1> omega__;
  double min_lntau_hn;
  double max_lntau_hn;
  int z_hat_1dim__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> z{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> sigma_z{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> freq{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> omega{nullptr, 0};
 
 public:
  ~HN_series_model() { }
  
  inline std::string model_name() const final { return "HN_series_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.2", "stancflags = "};
  }
  
  
  HN_series_model(stan::io::var_context& context__,
                  unsigned int random_seed__ = 0,
                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "HN_series_model_namespace::HN_series_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 33;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 33;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 33;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 34;
      context__.validate_dims("data initialization","K","int",
           std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      
      
      current_statement__ = 34;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 34;
      stan::math::check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("z", "2 * N", (2 * N));
      current_statement__ = 36;
      context__.validate_dims("data initialization","z","double",
           std::vector<size_t>{static_cast<size_t>((2 * N))});
      z__ = 
        Eigen::Matrix<double, -1, 1>::Constant((2 * N),
          std::numeric_limits<double>::quiet_NaN());
      new (&z) Eigen::Map<Eigen::Matrix<double, -1, 1>>(z__.data(), (2 * N));
      
      {
        std::vector<local_scalar_t__> z_flat__;
        current_statement__ = 36;
        z_flat__ = context__.vals_r("z");
        current_statement__ = 36;
        pos__ = 1;
        current_statement__ = 36;
        for (int sym1__ = 1; sym1__ <= (2 * N); ++sym1__) {
          current_statement__ = 36;
          stan::model::assign(z, z_flat__[(pos__ - 1)],
            "assigning variable z", stan::model::index_uni(sym1__));
          current_statement__ = 36;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 37;
      stan::math::validate_non_negative_index("sigma_z", "2 * N", (2 * N));
      current_statement__ = 38;
      context__.validate_dims("data initialization","sigma_z","double",
           std::vector<size_t>{static_cast<size_t>((2 * N))});
      sigma_z__ = 
        Eigen::Matrix<double, -1, 1>::Constant((2 * N),
          std::numeric_limits<double>::quiet_NaN());
      new (&sigma_z) Eigen::Map<Eigen::Matrix<double, -1, 1>>(sigma_z__.data(), 
        (2 * N));
      
      {
        std::vector<local_scalar_t__> sigma_z_flat__;
        current_statement__ = 38;
        sigma_z_flat__ = context__.vals_r("sigma_z");
        current_statement__ = 38;
        pos__ = 1;
        current_statement__ = 38;
        for (int sym1__ = 1; sym1__ <= (2 * N); ++sym1__) {
          current_statement__ = 38;
          stan::model::assign(sigma_z, sigma_z_flat__[(pos__ - 1)],
            "assigning variable sigma_z", stan::model::index_uni(sym1__));
          current_statement__ = 38;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 39;
      stan::math::validate_non_negative_index("freq", "N", N);
      current_statement__ = 40;
      context__.validate_dims("data initialization","freq","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      freq__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&freq) Eigen::Map<Eigen::Matrix<double, -1, 1>>(freq__.data(), N);
      
      {
        std::vector<local_scalar_t__> freq_flat__;
        current_statement__ = 40;
        freq_flat__ = context__.vals_r("freq");
        current_statement__ = 40;
        pos__ = 1;
        current_statement__ = 40;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 40;
          stan::model::assign(freq, freq_flat__[(pos__ - 1)],
            "assigning variable freq", stan::model::index_uni(sym1__));
          current_statement__ = 40;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 41;
      context__.validate_dims("data initialization","min_tau_hn","double",
           std::vector<size_t>{});
      min_tau_hn = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 41;
      min_tau_hn = context__.vals_r("min_tau_hn")[(1 - 1)];
      current_statement__ = 41;
      stan::math::check_greater_or_equal(function__, "min_tau_hn",
                                            min_tau_hn, 0);
      current_statement__ = 42;
      context__.validate_dims("data initialization","max_tau_hn","double",
           std::vector<size_t>{});
      max_tau_hn = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 42;
      max_tau_hn = context__.vals_r("max_tau_hn")[(1 - 1)];
      current_statement__ = 42;
      stan::math::check_greater_or_equal(function__, "max_tau_hn",
                                            max_tau_hn, 0);
      current_statement__ = 43;
      context__.validate_dims("data initialization","induc_scale","double",
           std::vector<size_t>{});
      induc_scale = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 43;
      induc_scale = context__.vals_r("induc_scale")[(1 - 1)];
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "induc_scale",
                                            induc_scale, 0);
      current_statement__ = 44;
      context__.validate_dims("data initialization","r_inf_scale","double",
           std::vector<size_t>{});
      r_inf_scale = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 44;
      r_inf_scale = context__.vals_r("r_inf_scale")[(1 - 1)];
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "r_inf_scale",
                                            r_inf_scale, 0);
      current_statement__ = 45;
      context__.validate_dims("data initialization","r_hn_scale","double",
           std::vector<size_t>{});
      r_hn_scale = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 45;
      r_hn_scale = context__.vals_r("r_hn_scale")[(1 - 1)];
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__, "r_hn_scale",
                                            r_hn_scale, 0);
      current_statement__ = 46;
      context__.validate_dims("data initialization","sigma_min_lambda",
          "double", std::vector<size_t>{});
      sigma_min_lambda = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 46;
      sigma_min_lambda = context__.vals_r("sigma_min_lambda")[(1 - 1)];
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "sigma_min_lambda",
                                            sigma_min_lambda, 0);
      current_statement__ = 47;
      stan::math::validate_non_negative_index("omega", "N", N);
      current_statement__ = 48;
      omega__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&omega) Eigen::Map<Eigen::Matrix<double, -1, 1>>(omega__.data(), N);
        
      
      current_statement__ = 48;
      stan::model::assign(omega,
        stan::math::multiply(stan::math::multiply(freq, 2), stan::math::pi()),
        "assigning variable omega");
      current_statement__ = 49;
      min_lntau_hn = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 49;
      min_lntau_hn = stan::math::log(min_tau_hn);
      current_statement__ = 50;
      max_lntau_hn = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 50;
      max_lntau_hn = stan::math::log(max_tau_hn);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("r_hn_raw", "K", K);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("lntau_hn", "K", K);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("alpha_hn", "K", K);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("beta_hn", "K", K);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("r_hn", "K", K);
      current_statement__ = 56;
      z_hat_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 56;
      z_hat_1dim__ = (2 * N);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("z_hat", "2 * N", z_hat_1dim__);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("z_hat_re", "N", N);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("z_hat_im", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + K + K + K + K + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "HN_series_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ r_inf_raw = DUMMY_VAR__;
      current_statement__ = 1;
      r_inf_raw = in__.template read_constrain_lb<local_scalar_t__, 
                    jacobian__>(0, lp__);
      local_scalar_t__ induc_raw = DUMMY_VAR__;
      current_statement__ = 2;
      induc_raw = in__.template read_constrain_lb<local_scalar_t__, 
                    jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> r_hn_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 3;
      r_hn_raw = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                   lp__, K);
      Eigen::Matrix<local_scalar_t__, -1, 1> lntau_hn =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 4;
      lntau_hn = in__.template read_constrain_lub<
                   Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                   min_lntau_hn, max_lntau_hn, lp__, K);
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha_hn =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 5;
      alpha_hn = in__.template read_constrain_lub<
                   Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, 1,
                   lp__, K);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_hn =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 6;
      beta_hn = in__.template read_constrain_lub<
                  Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, 1,
                  lp__, K);
      local_scalar_t__ sigma_min = DUMMY_VAR__;
      current_statement__ = 7;
      sigma_min = in__.template read_constrain_lb<local_scalar_t__, 
                    jacobian__>(0, lp__);
      local_scalar_t__ r_inf = DUMMY_VAR__;
      current_statement__ = 8;
      r_inf = (r_inf_raw * r_inf_scale);
      local_scalar_t__ induc = DUMMY_VAR__;
      current_statement__ = 9;
      induc = (induc_raw * induc_scale);
      Eigen::Matrix<local_scalar_t__, -1, 1> r_hn =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(r_hn, stan::math::multiply(r_hn_raw, r_hn_scale),
        "assigning variable r_hn");
      Eigen::Matrix<local_scalar_t__, -1, 1> z_hat =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(z_hat_1dim__,
           DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_hat_re =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(z_hat_re, stan::math::rep_vector(0, N),
        "assigning variable z_hat_re");
      Eigen::Matrix<local_scalar_t__, -1, 1> z_hat_im =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 13;
      stan::model::assign(z_hat_im, stan::math::rep_vector(0, N),
        "assigning variable z_hat_im");
      current_statement__ = 24;
      for (int k = 1; k <= K; ++k) {
        local_scalar_t__ tau_hn = DUMMY_VAR__;
        current_statement__ = 14;
        tau_hn = stan::math::exp(
                   stan::model::rvalue(lntau_hn, "lntau_hn",
                     stan::model::index_uni(k)));
        current_statement__ = 22;
        for (int n = 1; n <= N; ++n) {
          local_scalar_t__ x = DUMMY_VAR__;
          current_statement__ = 15;
          x = hn_x(
                stan::model::rvalue(omega, "omega",
                  stan::model::index_uni(n)), tau_hn,
                stan::model::rvalue(beta_hn, "beta_hn",
                  stan::model::index_uni(k)), pstream__);
          local_scalar_t__ y = DUMMY_VAR__;
          current_statement__ = 16;
          y = hn_y(
                stan::model::rvalue(omega, "omega",
                  stan::model::index_uni(n)), tau_hn,
                stan::model::rvalue(beta_hn, "beta_hn",
                  stan::model::index_uni(k)), pstream__);
          local_scalar_t__ z_mod = DUMMY_VAR__;
          current_statement__ = 17;
          z_mod = z_mod_hn(
                    stan::model::rvalue(alpha_hn, "alpha_hn",
                      stan::model::index_uni(k)), x, y, pstream__);
          local_scalar_t__ theta = DUMMY_VAR__;
          current_statement__ = 18;
          theta = theta_hn(
                    stan::model::rvalue(alpha_hn, "alpha_hn",
                      stan::model::index_uni(k)), x, y, pstream__);
          current_statement__ = 19;
          stan::model::assign(z_hat_re,
            (stan::model::rvalue(z_hat_re, "z_hat_re",
               stan::model::index_uni(n)) +
              ((stan::model::rvalue(r_hn, "r_hn", stan::model::index_uni(k))
                 * z_mod) * stan::math::cos(theta))),
            "assigning variable z_hat_re", stan::model::index_uni(n));
          current_statement__ = 20;
          stan::model::assign(z_hat_im,
            (stan::model::rvalue(z_hat_im, "z_hat_im",
               stan::model::index_uni(n)) +
              ((stan::model::rvalue(r_hn, "r_hn", stan::model::index_uni(k))
                 * z_mod) * stan::math::sin(theta))),
            "assigning variable z_hat_im", stan::model::index_uni(n));
        }
      }
      current_statement__ = 25;
      stan::model::assign(z_hat_re,
        stan::math::add(stan::model::deep_copy(z_hat_re), r_inf),
        "assigning variable z_hat_re");
      current_statement__ = 26;
      stan::model::assign(z_hat_im,
        stan::math::add(stan::model::deep_copy(z_hat_im),
          stan::math::multiply(induc, omega)), "assigning variable z_hat_im");
      current_statement__ = 27;
      stan::model::assign(z_hat, stan::math::append_row(z_hat_re, z_hat_im),
        "assigning variable z_hat");
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "r_inf", r_inf, 0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "induc", induc, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "r_hn", r_hn, 0);
      {
        current_statement__ = 28;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(r_inf_raw));
        current_statement__ = 29;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(induc_raw));
        current_statement__ = 30;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(r_hn_raw));
        current_statement__ = 31;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(z, z_hat,
            stan::math::add(sigma_z, sigma_min)));
        current_statement__ = 32;
        lp_accum__.add(
          stan::math::exponential_lpdf<propto__>(sigma_min, sigma_min_lambda));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "HN_series_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double r_inf_raw = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      r_inf_raw = in__.template read_constrain_lb<local_scalar_t__, 
                    jacobian__>(0, lp__);
      double induc_raw = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      induc_raw = in__.template read_constrain_lb<local_scalar_t__, 
                    jacobian__>(0, lp__);
      Eigen::Matrix<double, -1, 1> r_hn_raw =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      r_hn_raw = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                   lp__, K);
      Eigen::Matrix<double, -1, 1> lntau_hn =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      lntau_hn = in__.template read_constrain_lub<
                   Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                   min_lntau_hn, max_lntau_hn, lp__, K);
      Eigen::Matrix<double, -1, 1> alpha_hn =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      alpha_hn = in__.template read_constrain_lub<
                   Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, 1,
                   lp__, K);
      Eigen::Matrix<double, -1, 1> beta_hn =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      beta_hn = in__.template read_constrain_lub<
                  Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, 1,
                  lp__, K);
      double sigma_min = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      sigma_min = in__.template read_constrain_lb<local_scalar_t__, 
                    jacobian__>(0, lp__);
      double r_inf = std::numeric_limits<double>::quiet_NaN();
      double induc = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double, -1, 1> r_hn =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> z_hat =
         Eigen::Matrix<double, -1, 1>::Constant(z_hat_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> z_hat_re =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> z_hat_im =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(r_inf_raw);
      out__.write(induc_raw);
      out__.write(r_hn_raw);
      out__.write(lntau_hn);
      out__.write(alpha_hn);
      out__.write(beta_hn);
      out__.write(sigma_min);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 8;
      r_inf = (r_inf_raw * r_inf_scale);
      current_statement__ = 9;
      induc = (induc_raw * induc_scale);
      current_statement__ = 10;
      stan::model::assign(r_hn, stan::math::multiply(r_hn_raw, r_hn_scale),
        "assigning variable r_hn");
      current_statement__ = 12;
      stan::model::assign(z_hat_re, stan::math::rep_vector(0, N),
        "assigning variable z_hat_re");
      current_statement__ = 13;
      stan::model::assign(z_hat_im, stan::math::rep_vector(0, N),
        "assigning variable z_hat_im");
      current_statement__ = 24;
      for (int k = 1; k <= K; ++k) {
        double tau_hn = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 14;
        tau_hn = stan::math::exp(
                   stan::model::rvalue(lntau_hn, "lntau_hn",
                     stan::model::index_uni(k)));
        current_statement__ = 22;
        for (int n = 1; n <= N; ++n) {
          double x = std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 15;
          x = hn_x(
                stan::model::rvalue(omega, "omega",
                  stan::model::index_uni(n)), tau_hn,
                stan::model::rvalue(beta_hn, "beta_hn",
                  stan::model::index_uni(k)), pstream__);
          double y = std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 16;
          y = hn_y(
                stan::model::rvalue(omega, "omega",
                  stan::model::index_uni(n)), tau_hn,
                stan::model::rvalue(beta_hn, "beta_hn",
                  stan::model::index_uni(k)), pstream__);
          double z_mod = std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 17;
          z_mod = z_mod_hn(
                    stan::model::rvalue(alpha_hn, "alpha_hn",
                      stan::model::index_uni(k)), x, y, pstream__);
          double theta = std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 18;
          theta = theta_hn(
                    stan::model::rvalue(alpha_hn, "alpha_hn",
                      stan::model::index_uni(k)), x, y, pstream__);
          current_statement__ = 19;
          stan::model::assign(z_hat_re,
            (stan::model::rvalue(z_hat_re, "z_hat_re",
               stan::model::index_uni(n)) +
              ((stan::model::rvalue(r_hn, "r_hn", stan::model::index_uni(k))
                 * z_mod) * stan::math::cos(theta))),
            "assigning variable z_hat_re", stan::model::index_uni(n));
          current_statement__ = 20;
          stan::model::assign(z_hat_im,
            (stan::model::rvalue(z_hat_im, "z_hat_im",
               stan::model::index_uni(n)) +
              ((stan::model::rvalue(r_hn, "r_hn", stan::model::index_uni(k))
                 * z_mod) * stan::math::sin(theta))),
            "assigning variable z_hat_im", stan::model::index_uni(n));
        }
      }
      current_statement__ = 25;
      stan::model::assign(z_hat_re,
        stan::math::add(stan::model::deep_copy(z_hat_re), r_inf),
        "assigning variable z_hat_re");
      current_statement__ = 26;
      stan::model::assign(z_hat_im,
        stan::math::add(stan::model::deep_copy(z_hat_im),
          stan::math::multiply(induc, omega)), "assigning variable z_hat_im");
      current_statement__ = 27;
      stan::model::assign(z_hat, stan::math::append_row(z_hat_re, z_hat_im),
        "assigning variable z_hat");
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "r_inf", r_inf, 0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "induc", induc, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "r_hn", r_hn, 0);
      if (emit_transformed_parameters__) {
        out__.write(r_inf);
        out__.write(induc);
        out__.write(r_hn);
        out__.write(z_hat);
        out__.write(z_hat_re);
        out__.write(z_hat_im);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ r_inf_raw = DUMMY_VAR__;
      r_inf_raw = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, r_inf_raw);
      local_scalar_t__ induc_raw = DUMMY_VAR__;
      induc_raw = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, induc_raw);
      Eigen::Matrix<local_scalar_t__, -1, 1> r_hn_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(r_hn_raw, in__.read<local_scalar_t__>(),
          "assigning variable r_hn_raw", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, r_hn_raw);
      Eigen::Matrix<local_scalar_t__, -1, 1> lntau_hn =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(lntau_hn, in__.read<local_scalar_t__>(),
          "assigning variable lntau_hn", stan::model::index_uni(sym1__));
      }
      out__.write_free_lub(min_lntau_hn, max_lntau_hn, lntau_hn);
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha_hn =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(alpha_hn, in__.read<local_scalar_t__>(),
          "assigning variable alpha_hn", stan::model::index_uni(sym1__));
      }
      out__.write_free_lub(0, 1, alpha_hn);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_hn =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(beta_hn, in__.read<local_scalar_t__>(),
          "assigning variable beta_hn", stan::model::index_uni(sym1__));
      }
      out__.write_free_lub(0, 1, beta_hn);
      local_scalar_t__ sigma_min = DUMMY_VAR__;
      sigma_min = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_min);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"r_inf_raw", "induc_raw", "r_hn_raw",
      "lntau_hn", "alpha_hn", "beta_hn", "sigma_min", "r_inf", "induc",
      "r_hn", "z_hat", "z_hat_re", "z_hat_im"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(z_hat_1dim__)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "r_inf_raw");
    param_names__.emplace_back(std::string() + "induc_raw");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "r_hn_raw" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lntau_hn" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_hn" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_hn" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma_min");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "r_inf");
      param_names__.emplace_back(std::string() + "induc");
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_hn" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= z_hat_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "z_hat" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "z_hat_re" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "z_hat_im" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "r_inf_raw");
    param_names__.emplace_back(std::string() + "induc_raw");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "r_hn_raw" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lntau_hn" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_hn" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_hn" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma_min");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "r_inf");
      param_names__.emplace_back(std::string() + "induc");
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_hn" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= z_hat_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "z_hat" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "z_hat_re" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "z_hat_im" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"r_inf_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"induc_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r_hn_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"lntau_hn\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"alpha_hn\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"beta_hn\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma_min\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r_inf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"induc\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"r_hn\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"z_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(z_hat_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"z_hat_re\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"z_hat_im\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"r_inf_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"induc_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r_hn_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"lntau_hn\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"alpha_hn\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"beta_hn\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma_min\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r_inf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"induc\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"r_hn\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"z_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(z_hat_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"z_hat_re\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"z_hat_im\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((1 + 1) + K) + K) + K) + K) + 1);
      const size_t num_transformed = 
  (((((1 + 1) + K) + z_hat_1dim__) + N) + N);
      const size_t num_gen_quantities = 0;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((1 + 1) + K) + K) + K) + K) + 1);
      const size_t num_transformed = 
  (((((1 + 1) + K) + z_hat_1dim__) + N) + N);
      const size_t num_gen_quantities = 0;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 7> names__{"r_inf_raw", "induc_raw",
      "r_hn_raw", "lntau_hn", "alpha_hn", "beta_hn", "sigma_min"};
      const std::array<Eigen::Index, 7> constrain_param_sizes__{1, 1, 
       K, K, K, K, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } using stan_model = HN_series_model_namespace::HN_series_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return HN_series_model_namespace::profiles__;
}

#endif


