
// Code generated by stanc v2.28.1
#include <stan/model/model_header.hpp>
namespace GalvSquareWaveDRT_pos_noL_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 79> locations_array__ = 
{" (found before start of program)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 55, column 1 to column 25)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 56, column 1 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 58, column 1 to column 22)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 59, column 1 to column 29)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 63, column 1 to column 28)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 64, column 1 to column 27)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 65, column 1 to column 27)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 66, column 1 to column 27)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 70, column 1 to column 45)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 71, column 1 to column 51)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 72, column 1 to column 35)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 75, column 1 to column 45)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 78, column 1 to column 57)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 79, column 1 to column 71)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 82, column 1 to column 22)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 83, column 1 to column 46)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 84, column 1 to column 18)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 87, column 1 to column 90)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 89, column 2 to column 62)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 88, column 1 to line 89, column 62)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 93, column 1 to column 43)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 94, column 1 to column 43)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 95, column 1 to column 43)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 96, column 1 to column 41)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 97, column 1 to column 26)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 98, column 1 to column 31)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 100, column 1 to column 19)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 101, column 1 to column 21)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 102, column 1 to column 29)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 103, column 1 to column 30)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 18, column 1 to column 16)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 19, column 1 to column 16)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 28, column 8 to column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 28, column 1 to column 17)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 29, column 8 to column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 29, column 1 to column 13)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 32, column 8 to column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 32, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 32, column 1 to column 15)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 35, column 8 to column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 35, column 1 to column 18)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 38, column 8 to column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 38, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 38, column 1 to column 16)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 39, column 8 to column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 39, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 39, column 1 to column 16)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 40, column 8 to column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 40, column 10 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 40, column 1 to column 16)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 43, column 1 to column 25)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 44, column 1 to column 25)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 45, column 1 to column 24)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 46, column 1 to column 25)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 47, column 1 to column 24)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 48, column 1 to column 23)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 49, column 1 to column 31)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 51, column 1 to column 27)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 52, column 1 to column 32)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 58, column 17 to column 18)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 63, column 17 to column 18)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 72, column 8 to column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 75, column 8 to column 9)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 82, column 17 to column 18)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 83, column 17 to column 18)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 84, column 8 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 3, column 2 to column 22)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 4, column 9 to column 10)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 4, column 2 to column 14)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 10, column 4 to column 13)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 9, column 8 to line 11, column 4)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 7, column 4 to column 13)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 6, column 26 to line 8, column 4)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 6, column 3 to line 11, column 4)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 5, column 17 to line 12, column 3)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 5, column 2 to line 12, column 3)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 13, column 2 to column 11)",
 " (in 'C:/Users/jdh10/ONEDRI~1/python/projects/SQUARE~1/sqeis/STAN_M~1/GalvSquareWaveDRT_pos_noL.stan', line 2, column 46 to line 14, column 2)"};


template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
T1__>, -1, 1>
unit_step(const T0__& times_arg__, const T1__& t_step,
          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__>;
  int current_statement__ = 0; 
  const auto& times = to_ref(times_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int M;
    M = std::numeric_limits<int>::min();
    
    current_statement__ = 67;
    M = rows(times);
    current_statement__ = 68;
    validate_non_negative_index("u", "M", M);
    Eigen::Matrix<local_scalar_t__, -1, 1> u;
    u = Eigen::Matrix<local_scalar_t__, -1, 1>(M);
    stan::math::fill(u, DUMMY_VAR__);
    
    current_statement__ = 76;
    for (int m = 1; m <= M; ++m) {
      current_statement__ = 74;
      if (logical_gt(rvalue(times, "times", index_uni(m)), t_step)) {
        current_statement__ = 72;
        assign(u, 1, "assigning variable u", index_uni(m));
      } else {
        current_statement__ = 70;
        assign(u, 0, "assigning variable u", index_uni(m));
      }
    }
    current_statement__ = 77;
    return u;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct unit_step_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
T1__>, -1, 1>
operator()(const T0__& times, const T1__& t_step, std::ostream* pstream__)  const 
{
return unit_step(times, t_step, pstream__);
}
};

class GalvSquareWaveDRT_pos_noL_model final : public model_base_crtp<GalvSquareWaveDRT_pos_noL_model> {

 private:
  int N;
  int K;
  Eigen::Matrix<double, -1, 1> times__;
  Eigen::Matrix<double, -1, 1> V__;
  Eigen::Matrix<double, -1, -1> A__;
  Eigen::Matrix<double, -1, 1> inf_rv__;
  Eigen::Matrix<double, -1, -1> L0__;
  Eigen::Matrix<double, -1, -1> L1__;
  Eigen::Matrix<double, -1, -1> L2__;
  double sigma_min;
  double ups_alpha;
  double ups_beta;
  double ups_scale;
  double ds_alpha;
  double ds_beta;
  double sigma_res_scale;
  double R_inf_scale;
  double V_baseline_scale;
  int dups_1dim__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> times{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> V{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> A{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> inf_rv{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> L0{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> L1{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> L2{nullptr, 0, 0};
 
 public:
  ~GalvSquareWaveDRT_pos_noL_model() { }
  
  inline std::string model_name() const final { return "GalvSquareWaveDRT_pos_noL_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.28.1", "stancflags = "};
  }
  
  
  GalvSquareWaveDRT_pos_noL_model(stan::io::var_context& context__,
                                  unsigned int random_seed__ = 0,
                                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "GalvSquareWaveDRT_pos_noL_model_namespace::GalvSquareWaveDRT_pos_noL_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 31;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 31;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 31;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 32;
      context__.validate_dims("data initialization","K","int",
           std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      
      current_statement__ = 32;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 32;
      check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 33;
      validate_non_negative_index("times", "N", N);
      current_statement__ = 34;
      context__.validate_dims("data initialization","times","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      times__ = Eigen::Matrix<double, -1, 1>(N);
      new (&times) Eigen::Map<Eigen::Matrix<double, -1, 1>>(times__.data(), N);
      
      
      {
        std::vector<local_scalar_t__> times_flat__;
        current_statement__ = 34;
        times_flat__ = context__.vals_r("times");
        current_statement__ = 34;
        pos__ = 1;
        current_statement__ = 34;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 34;
          assign(times, times_flat__[(pos__ - 1)],
            "assigning variable times", index_uni(sym1__));
          current_statement__ = 34;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 35;
      validate_non_negative_index("V", "N", N);
      current_statement__ = 36;
      context__.validate_dims("data initialization","V","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      V__ = Eigen::Matrix<double, -1, 1>(N);
      new (&V) Eigen::Map<Eigen::Matrix<double, -1, 1>>(V__.data(), N);
      
      {
        std::vector<local_scalar_t__> V_flat__;
        current_statement__ = 36;
        V_flat__ = context__.vals_r("V");
        current_statement__ = 36;
        pos__ = 1;
        current_statement__ = 36;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 36;
          assign(V, V_flat__[(pos__ - 1)],
            "assigning variable V", index_uni(sym1__));
          current_statement__ = 36;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 37;
      validate_non_negative_index("A", "N", N);
      current_statement__ = 38;
      validate_non_negative_index("A", "K", K);
      current_statement__ = 39;
      context__.validate_dims("data initialization","A","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(K)});
      A__ = Eigen::Matrix<double, -1, -1>(N, K);
      new (&A) Eigen::Map<Eigen::Matrix<double, -1, -1>>(A__.data(), N, K);
      
      {
        std::vector<local_scalar_t__> A_flat__;
        current_statement__ = 39;
        A_flat__ = context__.vals_r("A");
        current_statement__ = 39;
        pos__ = 1;
        current_statement__ = 39;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 39;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 39;
            assign(A, A_flat__[(pos__ - 1)],
              "assigning variable A", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 39;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 40;
      validate_non_negative_index("inf_rv", "N", N);
      current_statement__ = 41;
      context__.validate_dims("data initialization","inf_rv","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      inf_rv__ = Eigen::Matrix<double, -1, 1>(N);
      new (&inf_rv) Eigen::Map<Eigen::Matrix<double, -1, 1>>(inf_rv__.data(), N);
      
      
      {
        std::vector<local_scalar_t__> inf_rv_flat__;
        current_statement__ = 41;
        inf_rv_flat__ = context__.vals_r("inf_rv");
        current_statement__ = 41;
        pos__ = 1;
        current_statement__ = 41;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 41;
          assign(inf_rv, inf_rv_flat__[(pos__ - 1)],
            "assigning variable inf_rv", index_uni(sym1__));
          current_statement__ = 41;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 42;
      validate_non_negative_index("L0", "K", K);
      current_statement__ = 43;
      validate_non_negative_index("L0", "K", K);
      current_statement__ = 44;
      context__.validate_dims("data initialization","L0","double",
           std::vector<size_t>{static_cast<size_t>(K),
            static_cast<size_t>(K)});
      L0__ = Eigen::Matrix<double, -1, -1>(K, K);
      new (&L0) Eigen::Map<Eigen::Matrix<double, -1, -1>>(L0__.data(), K, K);
      
      {
        std::vector<local_scalar_t__> L0_flat__;
        current_statement__ = 44;
        L0_flat__ = context__.vals_r("L0");
        current_statement__ = 44;
        pos__ = 1;
        current_statement__ = 44;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 44;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 44;
            assign(L0, L0_flat__[(pos__ - 1)],
              "assigning variable L0", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 44;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 45;
      validate_non_negative_index("L1", "K", K);
      current_statement__ = 46;
      validate_non_negative_index("L1", "K", K);
      current_statement__ = 47;
      context__.validate_dims("data initialization","L1","double",
           std::vector<size_t>{static_cast<size_t>(K),
            static_cast<size_t>(K)});
      L1__ = Eigen::Matrix<double, -1, -1>(K, K);
      new (&L1) Eigen::Map<Eigen::Matrix<double, -1, -1>>(L1__.data(), K, K);
      
      {
        std::vector<local_scalar_t__> L1_flat__;
        current_statement__ = 47;
        L1_flat__ = context__.vals_r("L1");
        current_statement__ = 47;
        pos__ = 1;
        current_statement__ = 47;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 47;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 47;
            assign(L1, L1_flat__[(pos__ - 1)],
              "assigning variable L1", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 47;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 48;
      validate_non_negative_index("L2", "K", K);
      current_statement__ = 49;
      validate_non_negative_index("L2", "K", K);
      current_statement__ = 50;
      context__.validate_dims("data initialization","L2","double",
           std::vector<size_t>{static_cast<size_t>(K),
            static_cast<size_t>(K)});
      L2__ = Eigen::Matrix<double, -1, -1>(K, K);
      new (&L2) Eigen::Map<Eigen::Matrix<double, -1, -1>>(L2__.data(), K, K);
      
      {
        std::vector<local_scalar_t__> L2_flat__;
        current_statement__ = 50;
        L2_flat__ = context__.vals_r("L2");
        current_statement__ = 50;
        pos__ = 1;
        current_statement__ = 50;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 50;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 50;
            assign(L2, L2_flat__[(pos__ - 1)],
              "assigning variable L2", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 50;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 51;
      context__.validate_dims("data initialization","sigma_min","double",
           std::vector<size_t>{});
      sigma_min = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 51;
      sigma_min = context__.vals_r("sigma_min")[(1 - 1)];
      current_statement__ = 51;
      check_greater_or_equal(function__, "sigma_min", sigma_min, 0);
      current_statement__ = 52;
      context__.validate_dims("data initialization","ups_alpha","double",
           std::vector<size_t>{});
      ups_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 52;
      ups_alpha = context__.vals_r("ups_alpha")[(1 - 1)];
      current_statement__ = 52;
      check_greater_or_equal(function__, "ups_alpha", ups_alpha, 0);
      current_statement__ = 53;
      context__.validate_dims("data initialization","ups_beta","double",
           std::vector<size_t>{});
      ups_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 53;
      ups_beta = context__.vals_r("ups_beta")[(1 - 1)];
      current_statement__ = 53;
      check_greater_or_equal(function__, "ups_beta", ups_beta, 0);
      current_statement__ = 54;
      context__.validate_dims("data initialization","ups_scale","double",
           std::vector<size_t>{});
      ups_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 54;
      ups_scale = context__.vals_r("ups_scale")[(1 - 1)];
      current_statement__ = 54;
      check_greater_or_equal(function__, "ups_scale", ups_scale, 0);
      current_statement__ = 55;
      context__.validate_dims("data initialization","ds_alpha","double",
           std::vector<size_t>{});
      ds_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 55;
      ds_alpha = context__.vals_r("ds_alpha")[(1 - 1)];
      current_statement__ = 55;
      check_greater_or_equal(function__, "ds_alpha", ds_alpha, 0);
      current_statement__ = 56;
      context__.validate_dims("data initialization","ds_beta","double",
           std::vector<size_t>{});
      ds_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 56;
      ds_beta = context__.vals_r("ds_beta")[(1 - 1)];
      current_statement__ = 56;
      check_greater_or_equal(function__, "ds_beta", ds_beta, 0);
      current_statement__ = 57;
      context__.validate_dims("data initialization","sigma_res_scale",
          "double", std::vector<size_t>{});
      sigma_res_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 57;
      sigma_res_scale = context__.vals_r("sigma_res_scale")[(1 - 1)];
      current_statement__ = 57;
      check_greater_or_equal(function__, "sigma_res_scale", sigma_res_scale,
                             0);
      current_statement__ = 58;
      context__.validate_dims("data initialization","R_inf_scale","double",
           std::vector<size_t>{});
      R_inf_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 58;
      R_inf_scale = context__.vals_r("R_inf_scale")[(1 - 1)];
      current_statement__ = 58;
      check_greater_or_equal(function__, "R_inf_scale", R_inf_scale, 0);
      current_statement__ = 59;
      context__.validate_dims("data initialization","V_baseline_scale",
          "double", std::vector<size_t>{});
      V_baseline_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 59;
      V_baseline_scale = context__.vals_r("V_baseline_scale")[(1 - 1)];
      current_statement__ = 59;
      check_greater_or_equal(function__, "V_baseline_scale",
                             V_baseline_scale, 0);
      current_statement__ = 60;
      validate_non_negative_index("x", "K", K);
      current_statement__ = 61;
      validate_non_negative_index("ups_raw", "K", K);
      current_statement__ = 62;
      validate_non_negative_index("V_inst", "N", N);
      current_statement__ = 63;
      validate_non_negative_index("V_hat", "N", N);
      current_statement__ = 64;
      validate_non_negative_index("q", "K", K);
      current_statement__ = 65;
      validate_non_negative_index("ups", "K", K);
      current_statement__ = 66;
      dups_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 66;
      dups_1dim__ = (K - 2);
      current_statement__ = 66;
      validate_non_negative_index("dups", "K - 2", dups_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + K + 1 + K + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "GalvSquareWaveDRT_pos_noL_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ R_inf_raw;
      R_inf_raw = DUMMY_VAR__;
      
      current_statement__ = 1;
      R_inf_raw = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                    0, lp__);
      local_scalar_t__ V_baseline_raw;
      V_baseline_raw = DUMMY_VAR__;
      
      current_statement__ = 2;
      V_baseline_raw = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__, -1, 1> x;
      x = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(x, DUMMY_VAR__);
      
      current_statement__ = 3;
      x = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
            0, lp__, K);
      local_scalar_t__ sigma_res_raw;
      sigma_res_raw = DUMMY_VAR__;
      
      current_statement__ = 4;
      sigma_res_raw = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                        0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> ups_raw;
      ups_raw = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(ups_raw, DUMMY_VAR__);
      
      current_statement__ = 5;
      ups_raw = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                  0, lp__, K);
      local_scalar_t__ d0_strength;
      d0_strength = DUMMY_VAR__;
      
      current_statement__ = 6;
      d0_strength = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                      0, lp__);
      local_scalar_t__ d1_strength;
      d1_strength = DUMMY_VAR__;
      
      current_statement__ = 7;
      d1_strength = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                      0, lp__);
      local_scalar_t__ d2_strength;
      d2_strength = DUMMY_VAR__;
      
      current_statement__ = 8;
      d2_strength = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                      0, lp__);
      local_scalar_t__ R_inf;
      R_inf = DUMMY_VAR__;
      
      current_statement__ = 9;
      R_inf = (R_inf_raw * R_inf_scale);
      local_scalar_t__ V_baseline;
      V_baseline = DUMMY_VAR__;
      
      current_statement__ = 10;
      V_baseline = (V_baseline_raw * V_baseline_scale);
      Eigen::Matrix<local_scalar_t__, -1, 1> V_inst;
      V_inst = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(V_inst, DUMMY_VAR__);
      
      current_statement__ = 11;
      assign(V_inst, multiply(R_inf, inf_rv), "assigning variable V_inst");
      Eigen::Matrix<local_scalar_t__, -1, 1> V_hat;
      V_hat = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(V_hat, DUMMY_VAR__);
      
      current_statement__ = 12;
      assign(V_hat, add(add(multiply(A, x), V_inst), V_baseline),
        "assigning variable V_hat");
      local_scalar_t__ sigma_res;
      sigma_res = DUMMY_VAR__;
      
      current_statement__ = 13;
      sigma_res = (sigma_res_raw * sigma_res_scale);
      local_scalar_t__ sigma_tot;
      sigma_tot = DUMMY_VAR__;
      
      current_statement__ = 14;
      sigma_tot = stan::math::sqrt((square(sigma_min) + square(sigma_res)));
      Eigen::Matrix<local_scalar_t__, -1, 1> q;
      q = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(q, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> ups;
      ups = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(ups, DUMMY_VAR__);
      
      current_statement__ = 16;
      assign(ups, multiply(ups_raw, ups_scale), "assigning variable ups");
      Eigen::Matrix<local_scalar_t__, -1, 1> dups;
      dups = Eigen::Matrix<local_scalar_t__, -1, 1>(dups_1dim__);
      stan::math::fill(dups, DUMMY_VAR__);
      
      current_statement__ = 18;
      assign(q,
        stan::math::sqrt(
          add(
            add(multiply(d0_strength, square(multiply(L0, x))),
              multiply(d1_strength, square(multiply(L1, x)))),
            multiply(d2_strength, square(multiply(L2, x))))),
        "assigning variable q");
      current_statement__ = 20;
      for (int k = 1; k <= (K - 2); ++k) {
        current_statement__ = 19;
        assign(dups,
          ((0.5 *
             (rvalue(ups, "ups", index_uni((k + 1))) -
               (0.5 *
                 (rvalue(ups, "ups", index_uni(k)) +
                   rvalue(ups, "ups", index_uni((k + 2))))))) /
            rvalue(ups, "ups", index_uni((k + 1)))),
          "assigning variable dups", index_uni(k));
      }
      current_statement__ = 9;
      check_greater_or_equal(function__, "R_inf", R_inf, 0);
      current_statement__ = 13;
      check_greater_or_equal(function__, "sigma_res", sigma_res, 0);
      current_statement__ = 14;
      check_greater_or_equal(function__, "sigma_tot", sigma_tot, 0);
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 15;
        check_greater_or_equal(function__, "q[sym1__]", q[(sym1__ - 1)], 0);
      }
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 16;
        check_greater_or_equal(function__, "ups[sym1__]", ups[(sym1__ - 1)],
                               0);
      }
      {
        current_statement__ = 21;
        lp_accum__.add(
          inv_gamma_lpdf<propto__>(d0_strength, ds_alpha, ds_beta));
        current_statement__ = 22;
        lp_accum__.add(
          inv_gamma_lpdf<propto__>(d1_strength, ds_alpha, ds_beta));
        current_statement__ = 23;
        lp_accum__.add(
          inv_gamma_lpdf<propto__>(d2_strength, ds_alpha, ds_beta));
        current_statement__ = 24;
        lp_accum__.add(inv_gamma_lpdf<propto__>(ups_raw, ups_alpha, ups_beta));
        current_statement__ = 25;
        lp_accum__.add(std_normal_lpdf<propto__>(R_inf_raw));
        current_statement__ = 26;
        lp_accum__.add(std_normal_lpdf<propto__>(V_baseline_raw));
        current_statement__ = 27;
        lp_accum__.add(normal_lpdf<propto__>(q, 0, ups));
        current_statement__ = 28;
        lp_accum__.add(std_normal_lpdf<propto__>(dups));
        current_statement__ = 29;
        lp_accum__.add(normal_lpdf<propto__>(V, V_hat, sigma_tot));
        current_statement__ = 30;
        lp_accum__.add(std_normal_lpdf<propto__>(sigma_res_raw));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "GalvSquareWaveDRT_pos_noL_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double R_inf_raw;
      R_inf_raw = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      R_inf_raw = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                    0, lp__);
      double V_baseline_raw;
      V_baseline_raw = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      V_baseline_raw = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double, -1, 1> x;
      x = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      x = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
            0, lp__, K);
      double sigma_res_raw;
      sigma_res_raw = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma_res_raw = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                        0, lp__);
      Eigen::Matrix<double, -1, 1> ups_raw;
      ups_raw = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(ups_raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      ups_raw = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                  0, lp__, K);
      double d0_strength;
      d0_strength = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      d0_strength = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                      0, lp__);
      double d1_strength;
      d1_strength = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      d1_strength = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                      0, lp__);
      double d2_strength;
      d2_strength = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      d2_strength = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                      0, lp__);
      double R_inf;
      R_inf = std::numeric_limits<double>::quiet_NaN();
      
      double V_baseline;
      V_baseline = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> V_inst;
      V_inst = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(V_inst, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> V_hat;
      V_hat = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(V_hat, std::numeric_limits<double>::quiet_NaN());
      
      double sigma_res;
      sigma_res = std::numeric_limits<double>::quiet_NaN();
      
      double sigma_tot;
      sigma_tot = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> q;
      q = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(q, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> ups;
      ups = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(ups, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> dups;
      dups = Eigen::Matrix<double, -1, 1>(dups_1dim__);
      stan::math::fill(dups, std::numeric_limits<double>::quiet_NaN());
      
      out__.write(R_inf_raw);
      out__.write(V_baseline_raw);
      out__.write(x);
      out__.write(sigma_res_raw);
      out__.write(ups_raw);
      out__.write(d0_strength);
      out__.write(d1_strength);
      out__.write(d2_strength);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 9;
      R_inf = (R_inf_raw * R_inf_scale);
      current_statement__ = 10;
      V_baseline = (V_baseline_raw * V_baseline_scale);
      current_statement__ = 11;
      assign(V_inst, multiply(R_inf, inf_rv), "assigning variable V_inst");
      current_statement__ = 12;
      assign(V_hat, add(add(multiply(A, x), V_inst), V_baseline),
        "assigning variable V_hat");
      current_statement__ = 13;
      sigma_res = (sigma_res_raw * sigma_res_scale);
      current_statement__ = 14;
      sigma_tot = stan::math::sqrt((square(sigma_min) + square(sigma_res)));
      current_statement__ = 16;
      assign(ups, multiply(ups_raw, ups_scale), "assigning variable ups");
      current_statement__ = 18;
      assign(q,
        stan::math::sqrt(
          add(
            add(multiply(d0_strength, square(multiply(L0, x))),
              multiply(d1_strength, square(multiply(L1, x)))),
            multiply(d2_strength, square(multiply(L2, x))))),
        "assigning variable q");
      current_statement__ = 20;
      for (int k = 1; k <= (K - 2); ++k) {
        current_statement__ = 19;
        assign(dups,
          ((0.5 *
             (rvalue(ups, "ups", index_uni((k + 1))) -
               (0.5 *
                 (rvalue(ups, "ups", index_uni(k)) +
                   rvalue(ups, "ups", index_uni((k + 2))))))) /
            rvalue(ups, "ups", index_uni((k + 1)))),
          "assigning variable dups", index_uni(k));
      }
      current_statement__ = 9;
      check_greater_or_equal(function__, "R_inf", R_inf, 0);
      current_statement__ = 13;
      check_greater_or_equal(function__, "sigma_res", sigma_res, 0);
      current_statement__ = 14;
      check_greater_or_equal(function__, "sigma_tot", sigma_tot, 0);
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 15;
        check_greater_or_equal(function__, "q[sym1__]", q[(sym1__ - 1)], 0);
      }
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 16;
        check_greater_or_equal(function__, "ups[sym1__]", ups[(sym1__ - 1)],
                               0);
      }
      if (emit_transformed_parameters__) {
        out__.write(R_inf);
        out__.write(V_baseline);
        out__.write(V_inst);
        out__.write(V_hat);
        out__.write(sigma_res);
        out__.write(sigma_tot);
        out__.write(q);
        out__.write(ups);
        out__.write(dups);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      local_scalar_t__ R_inf_raw;
      R_inf_raw = DUMMY_VAR__;
      
      R_inf_raw = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, R_inf_raw);
      local_scalar_t__ V_baseline_raw;
      V_baseline_raw = DUMMY_VAR__;
      
      V_baseline_raw = in__.read<local_scalar_t__>();
      out__.write(V_baseline_raw);
      Eigen::Matrix<local_scalar_t__, -1, 1> x;
      x = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(x, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        assign(x, in__.read<local_scalar_t__>(),
          "assigning variable x", index_uni(sym1__));
      }
      out__.write_free_lb(0, x);
      local_scalar_t__ sigma_res_raw;
      sigma_res_raw = DUMMY_VAR__;
      
      sigma_res_raw = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_res_raw);
      Eigen::Matrix<local_scalar_t__, -1, 1> ups_raw;
      ups_raw = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(ups_raw, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        assign(ups_raw, in__.read<local_scalar_t__>(),
          "assigning variable ups_raw", index_uni(sym1__));
      }
      out__.write_free_lb(0, ups_raw);
      local_scalar_t__ d0_strength;
      d0_strength = DUMMY_VAR__;
      
      d0_strength = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, d0_strength);
      local_scalar_t__ d1_strength;
      d1_strength = DUMMY_VAR__;
      
      d1_strength = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, d1_strength);
      local_scalar_t__ d2_strength;
      d2_strength = DUMMY_VAR__;
      
      d2_strength = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, d2_strength);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"R_inf_raw", "V_baseline_raw", "x",
      "sigma_res_raw", "ups_raw", "d0_strength", "d1_strength",
      "d2_strength", "R_inf", "V_baseline", "V_inst", "V_hat", "sigma_res",
      "sigma_tot", "q", "ups", "dups"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(dups_1dim__)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "R_inf_raw");
    param_names__.emplace_back(std::string() + "V_baseline_raw");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma_res_raw");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ups_raw" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "d0_strength");
    param_names__.emplace_back(std::string() + "d1_strength");
    param_names__.emplace_back(std::string() + "d2_strength");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "R_inf");
      param_names__.emplace_back(std::string() + "V_baseline");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "V_inst" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "V_hat" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "sigma_res");
      param_names__.emplace_back(std::string() + "sigma_tot");
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "q" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ups" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= dups_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dups" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "R_inf_raw");
    param_names__.emplace_back(std::string() + "V_baseline_raw");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma_res_raw");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ups_raw" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "d0_strength");
    param_names__.emplace_back(std::string() + "d1_strength");
    param_names__.emplace_back(std::string() + "d2_strength");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "R_inf");
      param_names__.emplace_back(std::string() + "V_baseline");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "V_inst" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "V_hat" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "sigma_res");
      param_names__.emplace_back(std::string() + "sigma_tot");
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "q" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ups" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= dups_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dups" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"R_inf_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"V_baseline_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma_res_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ups_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"d0_strength\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"d1_strength\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"d2_strength\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"R_inf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"V_baseline\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"V_inst\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"V_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_res\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_tot\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"q\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ups\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dups\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(dups_1dim__) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"R_inf_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"V_baseline_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma_res_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ups_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"d0_strength\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"d1_strength\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"d2_strength\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"R_inf\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"V_baseline\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"V_inst\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"V_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_res\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_tot\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"q\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ups\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dups\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(dups_1dim__) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((1 + 1) + K) + 1) + K) + 1) + 1) + 1);
      const size_t num_transformed = 
  ((((((((1 + 1) + N) + N) + 1) + 1) + K) + K) + dups_1dim__);
      const size_t num_gen_quantities = 0;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((1 + 1) + K) + 1) + K) + 1) + 1) + 1);
      const size_t num_transformed = 
  ((((((((1 + 1) + N) + N) + 1) + 1) + K) + K) + dups_1dim__);
      const size_t num_gen_quantities = 0;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 8> names__{"R_inf_raw",
      "V_baseline_raw", "x", "sigma_res_raw", "ups_raw", "d0_strength",
      "d1_strength", "d2_strength"};
      const std::array<Eigen::Index, 8> constrain_param_sizes__{1, 1, 
       K, 1, K, 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}

using stan_model = GalvSquareWaveDRT_pos_noL_model_namespace::GalvSquareWaveDRT_pos_noL_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return GalvSquareWaveDRT_pos_noL_model_namespace::profiles__;
}

#endif


